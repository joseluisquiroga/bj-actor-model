
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+932 (git sha1 613334d9, gcc 7.4.0-1ubuntu1~18.04.1 -fPIC -Os)


-- Parsing `synth.tcl' using frontend `tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: bin_to_disp.v
Parsing Verilog input from `bin_to_disp.v' to AST representation.
Generating RTLIL representation for module `\bin_to_disp'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: debouncer.v
Parsing Verilog input from `debouncer.v' to AST representation.
Generating RTLIL representation for module `\debouncer'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: multi_clock.v
Parsing Verilog input from `multi_clock.v' to AST representation.
Generating RTLIL representation for module `\test_top'.
Successfully finished Verilog frontend.

4. Executing SYNTH_ICE40 pass.

4.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

4.2. Executing HIERARCHY pass (managing design hierarchy).

4.2.1. Analyzing design hierarchy..
Top module:  \test_top
Used module:     \bin_to_disp
Used module:     \debouncer
Parameter \TOT_CKS = 250000

4.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\debouncer'.
Parameter \TOT_CKS = 250000
Generating RTLIL representation for module `$paramod\debouncer\TOT_CKS=250000'.
Parameter \TOT_CKS = 250000
Found cached RTLIL representation for module `$paramod\debouncer\TOT_CKS=250000'.
Parameter \TOT_CKS = 250000
Found cached RTLIL representation for module `$paramod\debouncer\TOT_CKS=250000'.
Parameter \TOT_CKS = 250000
Found cached RTLIL representation for module `$paramod\debouncer\TOT_CKS=250000'.

4.2.3. Analyzing design hierarchy..
Top module:  \test_top
Used module:     \bin_to_disp
Used module:     $paramod\debouncer\TOT_CKS=250000

4.2.4. Analyzing design hierarchy..
Top module:  \test_top
Used module:     \bin_to_disp
Used module:     $paramod\debouncer\TOT_CKS=250000
Removing unused module `\debouncer'.
Removed 1 unused modules.

4.3. Executing PROC pass (convert processes to netlists).

4.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 9 switch rules as full_case in process $proc$multi_clock.v:136$47 in module test_top.
Marked 3 switch rules as full_case in process $proc$multi_clock.v:99$17 in module test_top.
Marked 2 switch rules as full_case in process $proc$debouncer.v:19$211 in module $paramod\debouncer\TOT_CKS=250000.
Marked 1 switch rules as full_case in process $proc$bin_to_disp.v:18$1 in module bin_to_disp.
Removed a total of 0 dead cases.

4.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 19 assignments to connections.

4.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\test_top.$proc$multi_clock.v:132$82'.
  Set init value: \cicles_up = 1'0
Found init rule in `\test_top.$proc$multi_clock.v:131$81'.
  Set init value: \times_two = 1'0
Found init rule in `\test_top.$proc$multi_clock.v:97$80'.
  Set init value: \lim_tiks_down = 8'11001100
Found init rule in `\test_top.$proc$multi_clock.v:96$79'.
  Set init value: \lim_tiks_up = 8'00100010
Found init rule in `\test_top.$proc$multi_clock.v:95$78'.
  Set init value: \tik_count = 8'00000000
Found init rule in `\test_top.$proc$multi_clock.v:94$77'.
  Set init value: \mul_clock = 1'0
Found init rule in `\test_top.$proc$multi_clock.v:61$75'.
  Set init value: \r_Switch_4 = 1'0
Found init rule in `\test_top.$proc$multi_clock.v:59$74'.
  Set init value: \r_Switch_3 = 1'0
Found init rule in `\test_top.$proc$multi_clock.v:57$73'.
  Set init value: \r_Switch_2 = 1'0
Found init rule in `\test_top.$proc$multi_clock.v:55$72'.
  Set init value: \r_Switch_1 = 1'0
Found init rule in `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:17$224'.
  Set init value: \rg_stdy = 1'0
Found init rule in `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:16$223'.
  Set init value: \cnt_cks = 19'0000000000000000000
Found init rule in `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:15$222'.
  Set init value: \rg_dbn_rdy = 1'0
Found init rule in `\bin_to_disp.$proc$bin_to_disp.v:16$2'.
  Set init value: \r_Hex_Encoding = 7'0000000

4.3.5. Executing PROC_ARST pass (detect async resets in processes).

4.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\test_top.$proc$multi_clock.v:132$82'.
Creating decoders for process `\test_top.$proc$multi_clock.v:131$81'.
Creating decoders for process `\test_top.$proc$multi_clock.v:97$80'.
Creating decoders for process `\test_top.$proc$multi_clock.v:96$79'.
Creating decoders for process `\test_top.$proc$multi_clock.v:95$78'.
Creating decoders for process `\test_top.$proc$multi_clock.v:94$77'.
Creating decoders for process `\test_top.$proc$multi_clock.v:65$76'.
Creating decoders for process `\test_top.$proc$multi_clock.v:61$75'.
Creating decoders for process `\test_top.$proc$multi_clock.v:59$74'.
Creating decoders for process `\test_top.$proc$multi_clock.v:57$73'.
Creating decoders for process `\test_top.$proc$multi_clock.v:55$72'.
Creating decoders for process `\test_top.$proc$multi_clock.v:136$47'.
     1/4: $0\cicles_up[0:0]
     2/4: $0\times_two[0:0]
     3/4: $0\lim_tiks_down[7:0]
     4/4: $0\lim_tiks_up[7:0]
Creating decoders for process `\test_top.$proc$multi_clock.v:99$17'.
     1/2: $0\tik_count[7:0]
     2/2: $0\mul_clock[0:0]
Creating decoders for process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:17$224'.
Creating decoders for process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:16$223'.
Creating decoders for process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:15$222'.
Creating decoders for process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:19$211'.
     1/3: $0\rg_stdy[0:0]
     2/3: $0\cnt_cks[18:0]
     3/3: $0\rg_dbn_rdy[0:0]
Creating decoders for process `\bin_to_disp.$proc$bin_to_disp.v:16$2'.
Creating decoders for process `\bin_to_disp.$proc$bin_to_disp.v:18$1'.
     1/1: $0\r_Hex_Encoding[6:0]

4.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\test_top.\reset' from process `\test_top.$proc$multi_clock.v:65$76'.

4.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\test_top.\r_Switch_1' using process `\test_top.$proc$multi_clock.v:136$47'.
  created $dff cell `$procdff$351' with positive edge clock.
Creating register for signal `\test_top.\r_Switch_2' using process `\test_top.$proc$multi_clock.v:136$47'.
  created $dff cell `$procdff$352' with positive edge clock.
Creating register for signal `\test_top.\r_Switch_3' using process `\test_top.$proc$multi_clock.v:136$47'.
  created $dff cell `$procdff$353' with positive edge clock.
Creating register for signal `\test_top.\r_Switch_4' using process `\test_top.$proc$multi_clock.v:136$47'.
  created $dff cell `$procdff$354' with positive edge clock.
Creating register for signal `\test_top.\lim_tiks_up' using process `\test_top.$proc$multi_clock.v:136$47'.
  created $dff cell `$procdff$355' with positive edge clock.
Creating register for signal `\test_top.\lim_tiks_down' using process `\test_top.$proc$multi_clock.v:136$47'.
  created $dff cell `$procdff$356' with positive edge clock.
Creating register for signal `\test_top.\times_two' using process `\test_top.$proc$multi_clock.v:136$47'.
  created $dff cell `$procdff$357' with positive edge clock.
Creating register for signal `\test_top.\cicles_up' using process `\test_top.$proc$multi_clock.v:136$47'.
  created $dff cell `$procdff$358' with positive edge clock.
Creating register for signal `\test_top.\mul_clock' using process `\test_top.$proc$multi_clock.v:99$17'.
  created $dff cell `$procdff$359' with positive edge clock.
Creating register for signal `\test_top.\tik_count' using process `\test_top.$proc$multi_clock.v:99$17'.
  created $dff cell `$procdff$360' with positive edge clock.
Creating register for signal `$paramod\debouncer\TOT_CKS=250000.\rg_dbn_rdy' using process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:19$211'.
  created $dff cell `$procdff$361' with positive edge clock.
Creating register for signal `$paramod\debouncer\TOT_CKS=250000.\cnt_cks' using process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:19$211'.
  created $dff cell `$procdff$362' with positive edge clock.
Creating register for signal `$paramod\debouncer\TOT_CKS=250000.\rg_stdy' using process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:19$211'.
  created $dff cell `$procdff$363' with positive edge clock.
Creating register for signal `\bin_to_disp.\r_Hex_Encoding' using process `\bin_to_disp.$proc$bin_to_disp.v:18$1'.
  created $dff cell `$procdff$364' with positive edge clock.

4.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `test_top.$proc$multi_clock.v:132$82'.
Removing empty process `test_top.$proc$multi_clock.v:131$81'.
Removing empty process `test_top.$proc$multi_clock.v:97$80'.
Removing empty process `test_top.$proc$multi_clock.v:96$79'.
Removing empty process `test_top.$proc$multi_clock.v:95$78'.
Removing empty process `test_top.$proc$multi_clock.v:94$77'.
Removing empty process `test_top.$proc$multi_clock.v:65$76'.
Removing empty process `test_top.$proc$multi_clock.v:61$75'.
Removing empty process `test_top.$proc$multi_clock.v:59$74'.
Removing empty process `test_top.$proc$multi_clock.v:57$73'.
Removing empty process `test_top.$proc$multi_clock.v:55$72'.
Found and cleaned up 10 empty switches in `\test_top.$proc$multi_clock.v:136$47'.
Removing empty process `test_top.$proc$multi_clock.v:136$47'.
Found and cleaned up 3 empty switches in `\test_top.$proc$multi_clock.v:99$17'.
Removing empty process `test_top.$proc$multi_clock.v:99$17'.
Removing empty process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:17$224'.
Removing empty process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:16$223'.
Removing empty process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:15$222'.
Found and cleaned up 5 empty switches in `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:19$211'.
Removing empty process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:19$211'.
Removing empty process `bin_to_disp.$proc$bin_to_disp.v:16$2'.
Found and cleaned up 1 empty switch in `\bin_to_disp.$proc$bin_to_disp.v:18$1'.
Removing empty process `bin_to_disp.$proc$bin_to_disp.v:18$1'.
Cleaned up 19 empty switches.

4.4. Executing FLATTEN pass (flatten design).
Using template $paramod\debouncer\TOT_CKS=250000 for cells of type $paramod\debouncer\TOT_CKS=250000.
Using template bin_to_disp for cells of type bin_to_disp.
<suppressed ~6 debug messages>
No more expansions possible.
Deleting now unused module $paramod\debouncer\TOT_CKS=250000.
Deleting now unused module bin_to_disp.

4.5. Executing TRIBUF pass.

4.6. Executing DEMINOUT pass (demote inout ports to input or output).

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.
<suppressed ~54 debug messages>

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 12 unused cells and 183 unused wires.
<suppressed ~19 debug messages>

4.9. Executing CHECK pass (checking for obvious problems).
checking module test_top..
found and reported 0 problems.

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$307: \mul_clock -> 1'1
      Replacing known input bits on port A of cell $procmux$303: \mul_clock -> 1'0
      Replacing known input bits on port B of cell $techmap\it_but_1.$procmux$332: \it_but_1.rg_dbn_rdy -> 1'1
      Replacing known input bits on port B of cell $techmap\it_but_2.$procmux$332: \it_but_2.rg_dbn_rdy -> 1'1
      Replacing known input bits on port B of cell $techmap\it_but_3.$procmux$332: \it_but_3.rg_dbn_rdy -> 1'1
      Replacing known input bits on port B of cell $techmap\it_but_4.$procmux$332: \it_but_4.rg_dbn_rdy -> 1'1
  Analyzing evaluation results.
    dead port 1/2 on $mux $techmap\it_but_1.$procmux$321.
    dead port 1/2 on $mux $techmap\it_but_2.$procmux$321.
    dead port 1/2 on $mux $techmap\it_but_3.$procmux$321.
    dead port 1/2 on $mux $techmap\it_but_4.$procmux$321.
Removed 4 multiplexer ports.
<suppressed ~25 debug messages>

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_top.
    New ctrl vector for $mux cell $techmap\it_but_1.$procmux$332: { }
    New ctrl vector for $mux cell $techmap\it_but_2.$procmux$332: { }
    New ctrl vector for $mux cell $techmap\it_but_3.$procmux$332: { }
    New ctrl vector for $mux cell $techmap\it_but_4.$procmux$332: { }
  Optimizing cells in module \test_top.
Performed a total of 4 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_top.
Performed a total of 0 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

4.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

4.10.16. Finished OPT passes. (There is nothing left to do.)

4.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell test_top.$add$multi_clock.v:107$19 ($add).
Removed top 24 bits (of 32) from port Y of cell test_top.$add$multi_clock.v:107$19 ($add).
Removed top 31 bits (of 32) from port B of cell test_top.$add$multi_clock.v:160$50 ($add).
Removed top 24 bits (of 32) from port Y of cell test_top.$add$multi_clock.v:160$50 ($add).
Removed top 31 bits (of 32) from port B of cell test_top.$add$multi_clock.v:164$51 ($add).
Removed top 24 bits (of 32) from port Y of cell test_top.$add$multi_clock.v:164$51 ($add).
Removed top 31 bits (of 32) from port B of cell test_top.$sub$multi_clock.v:182$54 ($sub).
Removed top 24 bits (of 32) from port Y of cell test_top.$sub$multi_clock.v:182$54 ($sub).
Removed top 31 bits (of 32) from port B of cell test_top.$sub$multi_clock.v:186$55 ($sub).
Removed top 24 bits (of 32) from port Y of cell test_top.$sub$multi_clock.v:186$55 ($sub).
Removed top 1 bits (of 19) from port B of cell test_top.$techmap\it_but_1.$eq$debouncer.v:37$221 ($eq).
Removed top 31 bits (of 32) from port B of cell test_top.$techmap\it_but_1.$add$debouncer.v:34$220 ($add).
Removed top 13 bits (of 32) from port Y of cell test_top.$techmap\it_but_1.$add$debouncer.v:34$220 ($add).
Removed top 14 bits (of 32) from port B of cell test_top.$techmap\it_but_1.$lt$debouncer.v:33$218 ($lt).
Removed top 1 bits (of 19) from port B of cell test_top.$techmap\it_but_2.$eq$debouncer.v:37$221 ($eq).
Removed top 31 bits (of 32) from port B of cell test_top.$techmap\it_but_2.$add$debouncer.v:34$220 ($add).
Removed top 13 bits (of 32) from port Y of cell test_top.$techmap\it_but_2.$add$debouncer.v:34$220 ($add).
Removed top 14 bits (of 32) from port B of cell test_top.$techmap\it_but_2.$lt$debouncer.v:33$218 ($lt).
Removed top 1 bits (of 19) from port B of cell test_top.$techmap\it_but_3.$eq$debouncer.v:37$221 ($eq).
Removed top 31 bits (of 32) from port B of cell test_top.$techmap\it_but_3.$add$debouncer.v:34$220 ($add).
Removed top 13 bits (of 32) from port Y of cell test_top.$techmap\it_but_3.$add$debouncer.v:34$220 ($add).
Removed top 14 bits (of 32) from port B of cell test_top.$techmap\it_but_3.$lt$debouncer.v:33$218 ($lt).
Removed top 1 bits (of 19) from port B of cell test_top.$techmap\it_but_4.$eq$debouncer.v:37$221 ($eq).
Removed top 31 bits (of 32) from port B of cell test_top.$techmap\it_but_4.$add$debouncer.v:34$220 ($add).
Removed top 13 bits (of 32) from port Y of cell test_top.$techmap\it_but_4.$add$debouncer.v:34$220 ($add).
Removed top 14 bits (of 32) from port B of cell test_top.$techmap\it_but_4.$lt$debouncer.v:33$218 ($lt).
Removed top 3 bits (of 4) from port B of cell test_top.$techmap\disp_0.$procmux$349_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell test_top.$techmap\disp_0.$procmux$348_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell test_top.$techmap\disp_0.$procmux$347_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test_top.$techmap\disp_0.$procmux$346_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test_top.$techmap\disp_0.$procmux$345_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test_top.$techmap\disp_0.$procmux$344_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test_top.$techmap\disp_0.$procmux$343_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell test_top.$techmap\disp1.$procmux$349_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell test_top.$techmap\disp1.$procmux$348_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell test_top.$techmap\disp1.$procmux$347_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test_top.$techmap\disp1.$procmux$346_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test_top.$techmap\disp1.$procmux$345_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test_top.$techmap\disp1.$procmux$344_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test_top.$techmap\disp1.$procmux$343_CMP0 ($eq).
Removed top 24 bits (of 32) from wire test_top.$add$multi_clock.v:107$19_Y.
Removed top 24 bits (of 32) from wire test_top.$add$multi_clock.v:160$50_Y.
Removed top 24 bits (of 32) from wire test_top.$sub$multi_clock.v:186$55_Y.
Removed top 13 bits (of 32) from wire test_top.$techmap\it_but_3.$add$debouncer.v:34$220_Y.
Removed top 13 bits (of 32) from wire test_top.$techmap\it_but_4.$add$debouncer.v:34$220_Y.

4.12. Executing PEEPOPT pass (run peephole optimizers).

4.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

4.14. Executing SHARE pass (SAT-based resource sharing).

4.15. Executing TECHMAP pass (map to technology primitives).

4.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.15.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~30 debug messages>

4.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

4.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module test_top:
  creating $macc model for $add$multi_clock.v:107$19 ($add).
  creating $macc model for $add$multi_clock.v:160$50 ($add).
  creating $macc model for $add$multi_clock.v:164$51 ($add).
  creating $macc model for $sub$multi_clock.v:182$54 ($sub).
  creating $macc model for $sub$multi_clock.v:186$55 ($sub).
  creating $macc model for $techmap\it_but_1.$add$debouncer.v:34$220 ($add).
  creating $macc model for $techmap\it_but_2.$add$debouncer.v:34$220 ($add).
  creating $macc model for $techmap\it_but_3.$add$debouncer.v:34$220 ($add).
  creating $macc model for $techmap\it_but_4.$add$debouncer.v:34$220 ($add).
  creating $alu model for $macc $techmap\it_but_4.$add$debouncer.v:34$220.
  creating $alu model for $macc $techmap\it_but_3.$add$debouncer.v:34$220.
  creating $alu model for $macc $techmap\it_but_2.$add$debouncer.v:34$220.
  creating $alu model for $macc $techmap\it_but_1.$add$debouncer.v:34$220.
  creating $alu model for $macc $sub$multi_clock.v:186$55.
  creating $alu model for $macc $sub$multi_clock.v:182$54.
  creating $alu model for $macc $add$multi_clock.v:164$51.
  creating $alu model for $macc $add$multi_clock.v:160$50.
  creating $alu model for $macc $add$multi_clock.v:107$19.
  creating $alu model for $techmap\it_but_1.$lt$debouncer.v:33$218 ($lt): new $alu
  creating $alu model for $techmap\it_but_2.$lt$debouncer.v:33$218 ($lt): new $alu
  creating $alu model for $techmap\it_but_3.$lt$debouncer.v:33$218 ($lt): new $alu
  creating $alu model for $techmap\it_but_4.$lt$debouncer.v:33$218 ($lt): new $alu
  creating $alu model for $techmap\it_but_1.$eq$debouncer.v:37$221 ($eq): merged with $techmap\it_but_1.$lt$debouncer.v:33$218.
  creating $alu model for $techmap\it_but_2.$eq$debouncer.v:37$221 ($eq): merged with $techmap\it_but_2.$lt$debouncer.v:33$218.
  creating $alu model for $techmap\it_but_3.$eq$debouncer.v:37$221 ($eq): merged with $techmap\it_but_3.$lt$debouncer.v:33$218.
  creating $alu model for $techmap\it_but_4.$eq$debouncer.v:37$221 ($eq): merged with $techmap\it_but_4.$lt$debouncer.v:33$218.
  creating $alu cell for $techmap\it_but_4.$lt$debouncer.v:33$218, $techmap\it_but_4.$eq$debouncer.v:37$221: $auto$alumacc.cc:485:replace_alu$374
  creating $alu cell for $techmap\it_but_3.$lt$debouncer.v:33$218, $techmap\it_but_3.$eq$debouncer.v:37$221: $auto$alumacc.cc:485:replace_alu$385
  creating $alu cell for $techmap\it_but_2.$lt$debouncer.v:33$218, $techmap\it_but_2.$eq$debouncer.v:37$221: $auto$alumacc.cc:485:replace_alu$396
  creating $alu cell for $techmap\it_but_1.$lt$debouncer.v:33$218, $techmap\it_but_1.$eq$debouncer.v:37$221: $auto$alumacc.cc:485:replace_alu$407
  creating $alu cell for $add$multi_clock.v:107$19: $auto$alumacc.cc:485:replace_alu$418
  creating $alu cell for $add$multi_clock.v:160$50: $auto$alumacc.cc:485:replace_alu$421
  creating $alu cell for $add$multi_clock.v:164$51: $auto$alumacc.cc:485:replace_alu$424
  creating $alu cell for $sub$multi_clock.v:182$54: $auto$alumacc.cc:485:replace_alu$427
  creating $alu cell for $sub$multi_clock.v:186$55: $auto$alumacc.cc:485:replace_alu$430
  creating $alu cell for $techmap\it_but_1.$add$debouncer.v:34$220: $auto$alumacc.cc:485:replace_alu$433
  creating $alu cell for $techmap\it_but_2.$add$debouncer.v:34$220: $auto$alumacc.cc:485:replace_alu$436
  creating $alu cell for $techmap\it_but_3.$add$debouncer.v:34$220: $auto$alumacc.cc:485:replace_alu$439
  creating $alu cell for $techmap\it_but_4.$add$debouncer.v:34$220: $auto$alumacc.cc:485:replace_alu$442
  created 13 $alu and 0 $macc cells.

4.19. Executing OPT pass (performing simple optimizations).

4.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

4.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

4.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

4.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_top.
    New input vector for $reduce_and cell $auto$alumacc.cc:75:get_eq$379: { $auto$alumacc.cc:501:replace_alu$375 [0] $auto$alumacc.cc:501:replace_alu$375 [1] $auto$alumacc.cc:501:replace_alu$375 [2] $auto$alumacc.cc:501:replace_alu$375 [3] $auto$alumacc.cc:501:replace_alu$375 [4] $auto$alumacc.cc:501:replace_alu$375 [5] $auto$alumacc.cc:501:replace_alu$375 [6] $auto$alumacc.cc:501:replace_alu$375 [7] $auto$alumacc.cc:501:replace_alu$375 [8] $auto$alumacc.cc:501:replace_alu$375 [9] $auto$alumacc.cc:501:replace_alu$375 [10] $auto$alumacc.cc:501:replace_alu$375 [11] $auto$alumacc.cc:501:replace_alu$375 [12] $auto$alumacc.cc:501:replace_alu$375 [13] $auto$alumacc.cc:501:replace_alu$375 [14] $auto$alumacc.cc:501:replace_alu$375 [15] $auto$alumacc.cc:501:replace_alu$375 [16] $auto$alumacc.cc:501:replace_alu$375 [17] $auto$alumacc.cc:501:replace_alu$375 [18] }
    New input vector for $reduce_and cell $auto$alumacc.cc:75:get_eq$390: { $auto$alumacc.cc:501:replace_alu$386 [0] $auto$alumacc.cc:501:replace_alu$386 [1] $auto$alumacc.cc:501:replace_alu$386 [2] $auto$alumacc.cc:501:replace_alu$386 [3] $auto$alumacc.cc:501:replace_alu$386 [4] $auto$alumacc.cc:501:replace_alu$386 [5] $auto$alumacc.cc:501:replace_alu$386 [6] $auto$alumacc.cc:501:replace_alu$386 [7] $auto$alumacc.cc:501:replace_alu$386 [8] $auto$alumacc.cc:501:replace_alu$386 [9] $auto$alumacc.cc:501:replace_alu$386 [10] $auto$alumacc.cc:501:replace_alu$386 [11] $auto$alumacc.cc:501:replace_alu$386 [12] $auto$alumacc.cc:501:replace_alu$386 [13] $auto$alumacc.cc:501:replace_alu$386 [14] $auto$alumacc.cc:501:replace_alu$386 [15] $auto$alumacc.cc:501:replace_alu$386 [16] $auto$alumacc.cc:501:replace_alu$386 [17] $auto$alumacc.cc:501:replace_alu$386 [18] }
    New input vector for $reduce_and cell $auto$alumacc.cc:75:get_eq$401: { $auto$alumacc.cc:501:replace_alu$397 [0] $auto$alumacc.cc:501:replace_alu$397 [1] $auto$alumacc.cc:501:replace_alu$397 [2] $auto$alumacc.cc:501:replace_alu$397 [3] $auto$alumacc.cc:501:replace_alu$397 [4] $auto$alumacc.cc:501:replace_alu$397 [5] $auto$alumacc.cc:501:replace_alu$397 [6] $auto$alumacc.cc:501:replace_alu$397 [7] $auto$alumacc.cc:501:replace_alu$397 [8] $auto$alumacc.cc:501:replace_alu$397 [9] $auto$alumacc.cc:501:replace_alu$397 [10] $auto$alumacc.cc:501:replace_alu$397 [11] $auto$alumacc.cc:501:replace_alu$397 [12] $auto$alumacc.cc:501:replace_alu$397 [13] $auto$alumacc.cc:501:replace_alu$397 [14] $auto$alumacc.cc:501:replace_alu$397 [15] $auto$alumacc.cc:501:replace_alu$397 [16] $auto$alumacc.cc:501:replace_alu$397 [17] $auto$alumacc.cc:501:replace_alu$397 [18] }
    New input vector for $reduce_and cell $auto$alumacc.cc:75:get_eq$412: { $auto$alumacc.cc:501:replace_alu$408 [0] $auto$alumacc.cc:501:replace_alu$408 [1] $auto$alumacc.cc:501:replace_alu$408 [2] $auto$alumacc.cc:501:replace_alu$408 [3] $auto$alumacc.cc:501:replace_alu$408 [4] $auto$alumacc.cc:501:replace_alu$408 [5] $auto$alumacc.cc:501:replace_alu$408 [6] $auto$alumacc.cc:501:replace_alu$408 [7] $auto$alumacc.cc:501:replace_alu$408 [8] $auto$alumacc.cc:501:replace_alu$408 [9] $auto$alumacc.cc:501:replace_alu$408 [10] $auto$alumacc.cc:501:replace_alu$408 [11] $auto$alumacc.cc:501:replace_alu$408 [12] $auto$alumacc.cc:501:replace_alu$408 [13] $auto$alumacc.cc:501:replace_alu$408 [14] $auto$alumacc.cc:501:replace_alu$408 [15] $auto$alumacc.cc:501:replace_alu$408 [16] $auto$alumacc.cc:501:replace_alu$408 [17] $auto$alumacc.cc:501:replace_alu$408 [18] }
  Optimizing cells in module \test_top.
Performed a total of 4 changes.

4.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

4.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

4.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

4.19.9. Rerunning OPT passes. (Maybe there is more to do..)

4.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

4.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_top.
Performed a total of 0 changes.

4.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

4.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

4.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

4.19.16. Finished OPT passes. (There is nothing left to do.)

4.20. Executing FSM pass (extract and optimize FSM).

4.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking test_top.disp1.r_Hex_Encoding as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking test_top.disp_0.r_Hex_Encoding as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

4.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

4.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.21. Executing OPT pass (performing simple optimizations).

4.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

4.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

4.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

4.21.5. Finished fast OPT passes.

4.22. Executing MEMORY pass.

4.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

4.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

4.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

4.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.25. Executing TECHMAP pass (map to technology primitives).

4.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

4.25.2. Continuing TECHMAP pass.
No more expansions possible.

4.26. Executing ICE40_BRAMINIT pass.

4.27. Executing OPT pass (performing simple optimizations).

4.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.
<suppressed ~3 debug messages>

4.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

4.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 2 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

4.27.5. Finished fast OPT passes.

4.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.29. Executing OPT pass (performing simple optimizations).

4.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

4.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

4.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

4.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_top.
Performed a total of 0 changes.

4.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

4.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

4.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

4.29.9. Finished OPT passes. (There is nothing left to do.)

4.30. Executing ICE40_WRAPCARRY pass (wrap carries).

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

4.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $nex.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=18\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=15 for cells of type $pmux.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~371 debug messages>

4.32. Executing ICE40_OPT pass (performing simple optimizations).

4.32.1. Running ICE40 specific optimizations.

4.32.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.
<suppressed ~701 debug messages>

4.32.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
<suppressed ~732 debug messages>
Removed a total of 244 cells.

4.32.4. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 46 unused cells and 388 unused wires.
<suppressed ~47 debug messages>

4.32.6. Rerunning OPT passes. (Removed registers in this run.)

4.32.7. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$374.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$374.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$385.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$385.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$396.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$396.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$407.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$407.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$418.slice[0].carry: CO=\tik_count [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$421.slice[0].carry: CO=\lim_tiks_up [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$424.slice[0].carry: CO=\lim_tiks_down [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$427.slice[0].carry: CO=\lim_tiks_up [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$430.slice[0].carry: CO=\lim_tiks_down [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$433.slice[0].carry: CO=\it_but_1.cnt_cks [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$436.slice[0].carry: CO=\it_but_2.cnt_cks [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$439.slice[0].carry: CO=\it_but_3.cnt_cks [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$442.slice[0].carry: CO=\it_but_4.cnt_cks [0]

4.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

4.32.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

4.32.10. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 4 unused cells and 0 unused wires.
<suppressed ~4 debug messages>

4.32.12. Rerunning OPT passes. (Removed registers in this run.)

4.32.13. Running ICE40 specific optimizations.

4.32.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

4.32.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

4.32.16. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

4.32.18. Finished OPT passes. (There is nothing left to do.)

4.33. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

4.34. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module test_top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$751 to $_DFFE_PP_ for $0\lim_tiks_up[7:0] [0] -> \lim_tiks_up [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$752 to $_DFFE_PP_ for $0\lim_tiks_up[7:0] [1] -> \lim_tiks_up [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$753 to $_DFFE_PP_ for $0\lim_tiks_up[7:0] [2] -> \lim_tiks_up [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$754 to $_DFFE_PP_ for $0\lim_tiks_up[7:0] [3] -> \lim_tiks_up [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$755 to $_DFFE_PP_ for $0\lim_tiks_up[7:0] [4] -> \lim_tiks_up [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$756 to $_DFFE_PP_ for $0\lim_tiks_up[7:0] [5] -> \lim_tiks_up [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$757 to $_DFFE_PP_ for $0\lim_tiks_up[7:0] [6] -> \lim_tiks_up [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$758 to $_DFFE_PP_ for $0\lim_tiks_up[7:0] [7] -> \lim_tiks_up [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$759 to $_DFFE_PP_ for $0\lim_tiks_down[7:0] [0] -> \lim_tiks_down [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$760 to $_DFFE_PP_ for $0\lim_tiks_down[7:0] [1] -> \lim_tiks_down [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$761 to $_DFFE_PP_ for $0\lim_tiks_down[7:0] [2] -> \lim_tiks_down [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$762 to $_DFFE_PP_ for $0\lim_tiks_down[7:0] [3] -> \lim_tiks_down [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$763 to $_DFFE_PP_ for $0\lim_tiks_down[7:0] [4] -> \lim_tiks_down [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$764 to $_DFFE_PP_ for $0\lim_tiks_down[7:0] [5] -> \lim_tiks_down [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$765 to $_DFFE_PP_ for $0\lim_tiks_down[7:0] [6] -> \lim_tiks_down [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$766 to $_DFFE_PP_ for $0\lim_tiks_down[7:0] [7] -> \lim_tiks_down [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$767 to $_DFFE_PP_ for $0\times_two[0:0] -> \times_two.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$768 to $_DFFE_PP_ for $0\cicles_up[0:0] -> \cicles_up.

4.35. Executing TECHMAP pass (map to technology primitives).

4.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

4.35.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~126 debug messages>

4.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.
<suppressed ~226 debug messages>

4.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping test_top.$auto$alumacc.cc:485:replace_alu$418.slice[0].carry ($lut).
Mapping test_top.$auto$alumacc.cc:485:replace_alu$421.slice[0].carry ($lut).
Mapping test_top.$auto$alumacc.cc:485:replace_alu$424.slice[0].carry ($lut).
Mapping test_top.$auto$alumacc.cc:485:replace_alu$427.slice[0].carry ($lut).
Mapping test_top.$auto$alumacc.cc:485:replace_alu$430.slice[0].carry ($lut).
Mapping test_top.$auto$alumacc.cc:485:replace_alu$433.slice[0].carry ($lut).
Mapping test_top.$auto$alumacc.cc:485:replace_alu$436.slice[0].carry ($lut).
Mapping test_top.$auto$alumacc.cc:485:replace_alu$439.slice[0].carry ($lut).
Mapping test_top.$auto$alumacc.cc:485:replace_alu$442.slice[0].carry ($lut).

4.38. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in test_top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1414 (SB_DFF): \disp1.r_Hex_Encoding [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$749 (SB_DFF): \r_Switch_3 = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$944 (SB_DFF): \it_but_3.cnt_cks [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$962 (SB_DFF): \it_but_3.cnt_cks [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1063 (SB_DFF): \it_but_4.cnt_cks [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1064 (SB_DFF): \it_but_4.cnt_cks [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1065 (SB_DFF): \it_but_4.cnt_cks [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1066 (SB_DFF): \it_but_4.cnt_cks [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1067 (SB_DFF): \it_but_4.cnt_cks [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1068 (SB_DFF): \it_but_4.cnt_cks [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1069 (SB_DFF): \it_but_4.cnt_cks [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1070 (SB_DFF): \it_but_4.cnt_cks [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1071 (SB_DFF): \it_but_4.cnt_cks [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1072 (SB_DFF): \it_but_4.cnt_cks [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1073 (SB_DFF): \it_but_4.cnt_cks [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1074 (SB_DFF): \it_but_4.cnt_cks [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1075 (SB_DFF): \it_but_4.cnt_cks [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1076 (SB_DFF): \it_but_4.cnt_cks [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1077 (SB_DFF): \it_but_4.cnt_cks [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1078 (SB_DFF): \it_but_4.cnt_cks [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1079 (SB_DFF): \it_but_4.cnt_cks [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1158 (SB_DFF): \disp_0.r_Hex_Encoding [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1080 (SB_DFF): \it_but_4.cnt_cks [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1153 (SB_DFF): \disp_0.r_Hex_Encoding [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1154 (SB_DFF): \disp_0.r_Hex_Encoding [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1155 (SB_DFF): \disp_0.r_Hex_Encoding [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1156 (SB_DFF): \disp_0.r_Hex_Encoding [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1062 (SB_DFF): \it_but_4.cnt_cks [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1152 (SB_DFF): \disp_0.r_Hex_Encoding [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1157 (SB_DFF): \disp_0.r_Hex_Encoding [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1409 (SB_DFF): \disp1.r_Hex_Encoding [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1410 (SB_DFF): \disp1.r_Hex_Encoding [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1411 (SB_DFF): \disp1.r_Hex_Encoding [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1412 (SB_DFF): \disp1.r_Hex_Encoding [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1413 (SB_DFF): \disp1.r_Hex_Encoding [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$778 (SB_DFF): \it_but_1.rg_stdy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$846 (SB_DFF): \it_but_2.rg_stdy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$943 (SB_DFF): \it_but_3.rg_stdy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1061 (SB_DFF): \it_but_4.rg_stdy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$750 (SB_DFF): \r_Switch_4 = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1408 (SB_DFF): \disp1.r_Hex_Encoding [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$752 (SB_DFFE): \lim_tiks_up [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$753 (SB_DFFE): \lim_tiks_up [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$754 (SB_DFFE): \lim_tiks_up [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$755 (SB_DFFE): \lim_tiks_up [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$756 (SB_DFFE): \lim_tiks_up [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$757 (SB_DFFE): \lim_tiks_up [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$751 (SB_DFFE): \lim_tiks_up [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$758 (SB_DFFE): \lim_tiks_up [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$760 (SB_DFFE): \lim_tiks_down [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$761 (SB_DFFE): \lim_tiks_down [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$762 (SB_DFFE): \lim_tiks_down [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$763 (SB_DFFE): \lim_tiks_down [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$764 (SB_DFFE): \lim_tiks_down [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$765 (SB_DFFE): \lim_tiks_down [6] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$759 (SB_DFFE): \lim_tiks_down [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$767 (SB_DFFE): \times_two = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$768 (SB_DFFE): \cicles_up = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$769 (SB_DFF): \mul_clock = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$766 (SB_DFFE): \lim_tiks_down [7] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$771 (SB_DFF): \tik_count [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$772 (SB_DFF): \tik_count [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$773 (SB_DFF): \tik_count [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$774 (SB_DFF): \tik_count [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$775 (SB_DFF): \tik_count [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$776 (SB_DFF): \tik_count [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$770 (SB_DFF): \tik_count [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$777 (SB_DFF): \tik_count [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$780 (SB_DFF): \it_but_1.cnt_cks [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$781 (SB_DFF): \it_but_1.cnt_cks [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$782 (SB_DFF): \it_but_1.cnt_cks [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$783 (SB_DFF): \it_but_1.cnt_cks [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$784 (SB_DFF): \it_but_1.cnt_cks [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$785 (SB_DFF): \it_but_1.cnt_cks [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$786 (SB_DFF): \it_but_1.cnt_cks [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$787 (SB_DFF): \it_but_1.cnt_cks [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$788 (SB_DFF): \it_but_1.cnt_cks [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$789 (SB_DFF): \it_but_1.cnt_cks [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$790 (SB_DFF): \it_but_1.cnt_cks [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$791 (SB_DFF): \it_but_1.cnt_cks [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$792 (SB_DFF): \it_but_1.cnt_cks [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$793 (SB_DFF): \it_but_1.cnt_cks [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$794 (SB_DFF): \it_but_1.cnt_cks [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$795 (SB_DFF): \it_but_1.cnt_cks [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$796 (SB_DFF): \it_but_1.cnt_cks [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$779 (SB_DFF): \it_but_1.cnt_cks [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$747 (SB_DFF): \r_Switch_1 = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$853 (SB_DFF): \it_but_2.cnt_cks [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$797 (SB_DFF): \it_but_1.cnt_cks [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$848 (SB_DFF): \it_but_2.cnt_cks [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$849 (SB_DFF): \it_but_2.cnt_cks [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$850 (SB_DFF): \it_but_2.cnt_cks [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$851 (SB_DFF): \it_but_2.cnt_cks [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$798 (SB_DFF): \it_but_1.rg_dbn_rdy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$852 (SB_DFF): \it_but_2.cnt_cks [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$854 (SB_DFF): \it_but_2.cnt_cks [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$855 (SB_DFF): \it_but_2.cnt_cks [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$856 (SB_DFF): \it_but_2.cnt_cks [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$857 (SB_DFF): \it_but_2.cnt_cks [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$858 (SB_DFF): \it_but_2.cnt_cks [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$859 (SB_DFF): \it_but_2.cnt_cks [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$860 (SB_DFF): \it_but_2.cnt_cks [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$861 (SB_DFF): \it_but_2.cnt_cks [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$862 (SB_DFF): \it_but_2.cnt_cks [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$863 (SB_DFF): \it_but_2.cnt_cks [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$864 (SB_DFF): \it_but_2.cnt_cks [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$748 (SB_DFF): \r_Switch_2 = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$847 (SB_DFF): \it_but_2.cnt_cks [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$865 (SB_DFF): \it_but_2.cnt_cks [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$945 (SB_DFF): \it_but_3.cnt_cks [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$946 (SB_DFF): \it_but_3.cnt_cks [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$947 (SB_DFF): \it_but_3.cnt_cks [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$948 (SB_DFF): \it_but_3.cnt_cks [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$949 (SB_DFF): \it_but_3.cnt_cks [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$950 (SB_DFF): \it_but_3.cnt_cks [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$951 (SB_DFF): \it_but_3.cnt_cks [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$952 (SB_DFF): \it_but_3.cnt_cks [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$953 (SB_DFF): \it_but_3.cnt_cks [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$954 (SB_DFF): \it_but_3.cnt_cks [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$955 (SB_DFF): \it_but_3.cnt_cks [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$956 (SB_DFF): \it_but_3.cnt_cks [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$957 (SB_DFF): \it_but_3.cnt_cks [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$958 (SB_DFF): \it_but_3.cnt_cks [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$959 (SB_DFF): \it_but_3.cnt_cks [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$960 (SB_DFF): \it_but_3.cnt_cks [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$961 (SB_DFF): \it_but_3.cnt_cks [17] = 0

4.39. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in test_top.
  Merging $auto$simplemap.cc:277:simplemap_mux$2709 (A=1'1, B=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1392_Y, S=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1414 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$963 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [0], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$944 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$981 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [18], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$962 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1082 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [1], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1063 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1083 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [2], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1064 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1084 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [3], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1065 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1085 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [4], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1066 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1086 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [5], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1067 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1087 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [6], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1068 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1088 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [7], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1069 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1089 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [8], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1070 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1090 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [9], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1071 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1091 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [10], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1072 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1092 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [11], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1073 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1093 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [12], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1074 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1094 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [13], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1075 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1095 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [14], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1076 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1096 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [15], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1077 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1097 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [16], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1078 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1098 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [17], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1079 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2453 (A=1'1, B=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1392_Y, S=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1158 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1099 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [18], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1080 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2448 (A=1'1, B=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1387_Y, S=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1153 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2449 (A=1'1, B=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1388_Y, S=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1154 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2450 (A=1'1, B=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1389_Y, S=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1155 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2451 (A=1'1, B=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1390_Y, S=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1156 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1081 (A=1'0, B=$techmap\it_but_4.$procmux$326_Y [0], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1062 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2447 (A=1'0, B=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1386_Y, S=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1152 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2452 (A=1'1, B=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1391_Y, S=$techmap$techmap\disp_0.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1157 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2704 (A=1'1, B=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1387_Y, S=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1409 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2705 (A=1'1, B=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1388_Y, S=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1410 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2706 (A=1'1, B=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1389_Y, S=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1411 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2707 (A=1'1, B=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1390_Y, S=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1412 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2708 (A=1'1, B=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1391_Y, S=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1413 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$2703 (A=1'0, B=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1386_Y, S=$techmap$techmap\disp1.$procmux$334.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1369_Y) into $auto$simplemap.cc:420:simplemap_dff$1408 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$800 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [1], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$780 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$801 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [2], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$781 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$802 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [3], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$782 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$803 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [4], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$783 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$804 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [5], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$784 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$805 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [6], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$785 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$806 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [7], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$786 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$807 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [8], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$787 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$808 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [9], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$788 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$809 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [10], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$789 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$810 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [11], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$790 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$811 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [12], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$791 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$812 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [13], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$792 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$813 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [14], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$793 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$814 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [15], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$794 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$815 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [16], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$795 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$816 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [17], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$796 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$799 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [0], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$779 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$872 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [6], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$853 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$817 (A=1'0, B=$techmap\it_but_1.$procmux$326_Y [18], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$797 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$867 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [1], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$848 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$868 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [2], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$849 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$869 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [3], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$850 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$870 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [4], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$851 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$871 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [5], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$852 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$873 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [7], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$854 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$874 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [8], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$855 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$875 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [9], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$856 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$876 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [10], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$857 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$877 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [11], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$858 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$878 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [12], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$859 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$879 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [13], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$860 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$880 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [14], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$861 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$881 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [15], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$862 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$882 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [16], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$863 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$883 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [17], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$864 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$866 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [0], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$847 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$884 (A=1'0, B=$techmap\it_but_2.$procmux$326_Y [18], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$865 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$964 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [1], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$945 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$965 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [2], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$946 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$966 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [3], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$947 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$967 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [4], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$948 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$968 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [5], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$949 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$969 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [6], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$950 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$970 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [7], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$951 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$971 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [8], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$952 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$972 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [9], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$953 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$973 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [10], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$954 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$974 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [11], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$955 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$975 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [12], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$956 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$976 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [13], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$957 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$977 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [14], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$958 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$978 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [15], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$959 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$979 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [16], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$960 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$980 (A=1'0, B=$techmap\it_but_3.$procmux$326_Y [17], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$961 (SB_DFF).

4.40. Executing ICE40_OPT pass (performing simple optimizations).

4.40.1. Running ICE40 specific optimizations.

4.40.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.
<suppressed ~293 debug messages>

4.40.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
<suppressed ~1347 debug messages>
Removed a total of 449 cells.

4.40.4. Executing OPT_RMDFF pass (remove dff with constant values).

4.40.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 90 unused cells and 903 unused wires.
<suppressed ~91 debug messages>

4.40.6. Rerunning OPT passes. (Removed registers in this run.)

4.40.7. Running ICE40 specific optimizations.

4.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

4.40.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

4.40.10. Executing OPT_RMDFF pass (remove dff with constant values).

4.40.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

4.40.12. Finished OPT passes. (There is nothing left to do.)

4.41. Executing TECHMAP pass (map to technology primitives).

4.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

4.41.2. Continuing TECHMAP pass.
No more expansions possible.

4.42. Executing ABC pass (technology mapping using ABC).

4.42.1. Extracting gate netlist of module `\test_top' to `<abc-temp-dir>/input.blif'..
Extracted 654 gates and 897 wires to a netlist network with 241 inputs and 224 outputs.

4.42.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     238.
ABC: Participating nodes from both networks       =     527.
ABC: Participating nodes from the first network   =     237. (  79.53 % of nodes)
ABC: Participating nodes from the second network  =     290. (  97.32 % of nodes)
ABC: Node pairs (any polarity)                    =     237. (  79.53 % of names can be moved)
ABC: Node pairs (same polarity)                   =     235. (  78.86 % of names can be moved)
ABC: Total runtime =     0.02 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

4.42.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      297
ABC RESULTS:        internal signals:      432
ABC RESULTS:           input signals:      241
ABC RESULTS:          output signals:      224
Removing temp directory.

4.43. Executing ICE40_WRAPCARRY pass (wrap carries).

4.44. Executing TECHMAP pass (map to technology primitives).

4.44.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

4.44.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 81 unused cells and 447 unused wires.

4.45. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      404
  1-LUT               99
  2-LUT               29
  3-LUT              142
  4-LUT              134
  with \SB_CARRY      98

Eliminating LUTs.
Number of LUTs:      404
  1-LUT               99
  2-LUT               29
  3-LUT              142
  4-LUT              134
  with \SB_CARRY      98

Combining LUTs.
Number of LUTs:      396
  1-LUT               99
  2-LUT               20
  3-LUT              136
  4-LUT              141
  with \SB_CARRY      98

Eliminated 0 LUTs.
Combined 8 LUTs.
<suppressed ~2145 debug messages>

4.46. Executing TECHMAP pass (map to technology primitives).

4.46.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.46.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111011111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010000101000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000110000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110011000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101011110111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111111110010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110000001100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111011011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110101010111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
No more expansions possible.
<suppressed ~1085 debug messages>
Removed 0 unused cells and 800 unused wires.

4.47. Executing AUTONAME pass.
Renamed 7600 objects in module test_top (29 iterations).
<suppressed ~1076 debug messages>

4.48. Executing HIERARCHY pass (managing design hierarchy).

4.48.1. Analyzing design hierarchy..
Top module:  \test_top

4.48.2. Analyzing design hierarchy..
Top module:  \test_top
Removed 0 unused modules.

4.49. Printing statistics.

=== test_top ===

   Number of wires:                500
   Number of wire bits:            805
   Number of public wires:         500
   Number of public wire bits:     805
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                692
     SB_CARRY                      170
     SB_DFF                         18
     SB_DFFE                        18
     SB_DFFSR                       78
     SB_DFFSS                       12
     SB_LUT4                       396

4.50. Executing CHECK pass (checking for obvious problems).
checking module test_top..
found and reported 0 problems.

4.51. Executing JSON backend.

End of script. Logfile hash: 6783e32513
CPU: user 2.93s system 0.06s, MEM: 90.51 MB total, 50.59 MB resident
Yosys 0.9+932 (git sha1 613334d9, gcc 7.4.0-1ubuntu1~18.04.1 -fPIC -Os)
Time spent: 23% 18x opt_expr (0 sec), 15% 19x opt_clean (0 sec), ...
