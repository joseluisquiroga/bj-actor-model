
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+932 (git sha1 613334d9, gcc 7.4.0-1ubuntu1~18.04.1 -fPIC -Os)


-- Parsing `synth.tcl' using frontend `tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: bin_to_disp.v
Parsing Verilog input from `bin_to_disp.v' to AST representation.
Generating RTLIL representation for module `\bin_to_disp'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: calc_redun.v
Parsing Verilog input from `calc_redun.v' to AST representation.
Generating RTLIL representation for module `\calc_redun'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: tree_nand.v
Parsing Verilog input from `tree_nand.v' to AST representation.
Generating RTLIL representation for module `\tree_nand'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: debouncer.v
Parsing Verilog input from `debouncer.v' to AST representation.
Generating RTLIL representation for module `\debouncer'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: hprb_source.v
Parsing Verilog input from `hprb_source.v' to AST representation.
Generating RTLIL representation for module `\hprb_source'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: hprb_sink.v
Parsing Verilog input from `hprb_sink.v' to AST representation.
Generating RTLIL representation for module `\hprb_sink'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: test_1.v
Parsing Verilog input from `test_1.v' to AST representation.
Generating RTLIL representation for module `\test_top'.
Successfully finished Verilog frontend.

8. Executing SYNTH_ICE40 pass.

8.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

8.2. Executing HIERARCHY pass (managing design hierarchy).

8.2.1. Analyzing design hierarchy..
Top module:  \test_top
Used module:     \bin_to_disp
Used module:     \hprb_sink
Used module:         \calc_redun
Used module:             \tree_nand
Used module:         \debouncer
Used module:     \hprb_source
Parameter \WIDTH = 5

8.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\tree_nand'.
Parameter \WIDTH = 5
Generating RTLIL representation for module `$paramod\tree_nand\WIDTH=5'.
Parameter \WIDTH = 5
Found cached RTLIL representation for module `$paramod\tree_nand\WIDTH=5'.
Parameter \WIDTH = 5
Found cached RTLIL representation for module `$paramod\tree_nand\WIDTH=5'.
Parameter \WIDTH = 16

8.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\tree_nand'.
Parameter \WIDTH = 16
Generating RTLIL representation for module `$paramod\tree_nand\WIDTH=16'.
Parameter \WIDTH = 16
Found cached RTLIL representation for module `$paramod\tree_nand\WIDTH=16'.
Parameter \ASZ = 6
Parameter \DSZ = 3
Parameter \RSZ = 3

8.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\calc_redun'.
Parameter \ASZ = 6
Parameter \DSZ = 3
Parameter \RSZ = 3
Generating RTLIL representation for module `$paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3'.
Parameter \TOT_CKS = 1

8.2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\debouncer'.
Parameter \TOT_CKS = 1
Generating RTLIL representation for module `$paramod\debouncer\TOT_CKS=1'.
Parameter \ASZ = 6
Parameter \DSZ = 3
Parameter \RSZ = 3
Found cached RTLIL representation for module `$paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3'.
Parameter \TOT_CKS = 1
Found cached RTLIL representation for module `$paramod\debouncer\TOT_CKS=1'.
Parameter \MY_LOCAL_ADDR = 1
Parameter \PRB_SRC_ADDR = 0

8.2.6. Executing AST frontend in derive mode using pre-parsed AST for module `\hprb_sink'.
Parameter \MY_LOCAL_ADDR = 1
Parameter \PRB_SRC_ADDR = 0
Generating RTLIL representation for module `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0'.
Parameter \MY_LOCAL_ADDR = 0
Parameter \PRB_DST_ADDR = 1

8.2.7. Executing AST frontend in derive mode using pre-parsed AST for module `\hprb_source'.
Parameter \MY_LOCAL_ADDR = 0
Parameter \PRB_DST_ADDR = 1
Generating RTLIL representation for module `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1'.
Parameter \TOT_CKS = 250000

8.2.8. Executing AST frontend in derive mode using pre-parsed AST for module `\debouncer'.
Parameter \TOT_CKS = 250000
Generating RTLIL representation for module `$paramod\debouncer\TOT_CKS=250000'.

8.2.9. Analyzing design hierarchy..
Top module:  \test_top
Used module:     \bin_to_disp
Used module:     $paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0
Used module:         \calc_redun
Used module:             $paramod\tree_nand\WIDTH=5
Used module:                 \tree_nand
Used module:                     $paramod\tree_nand\WIDTH=16
Used module:         \debouncer
Used module:     $paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1
Used module:     $paramod\debouncer\TOT_CKS=250000
Parameter \WIDTH = 3

8.2.10. Executing AST frontend in derive mode using pre-parsed AST for module `\tree_nand'.
Parameter \WIDTH = 3
Generating RTLIL representation for module `$paramod\tree_nand\WIDTH=3'.
Parameter \WIDTH = 2

8.2.11. Executing AST frontend in derive mode using pre-parsed AST for module `\tree_nand'.
Parameter \WIDTH = 2
Generating RTLIL representation for module `$paramod\tree_nand\WIDTH=2'.
Parameter \WIDTH = 8

8.2.12. Executing AST frontend in derive mode using pre-parsed AST for module `\tree_nand'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\tree_nand\WIDTH=8'.
Parameter \WIDTH = 8
Found cached RTLIL representation for module `$paramod\tree_nand\WIDTH=8'.
Parameter \ASZ = 6
Parameter \DSZ = 3
Parameter \RSZ = 3
Found cached RTLIL representation for module `$paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3'.
Parameter \TOT_CKS = 1
Found cached RTLIL representation for module `$paramod\debouncer\TOT_CKS=1'.
Parameter \ASZ = 6
Parameter \DSZ = 3
Parameter \RSZ = 3
Found cached RTLIL representation for module `$paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3'.
Parameter \TOT_CKS = 1
Found cached RTLIL representation for module `$paramod\debouncer\TOT_CKS=1'.

8.2.13. Analyzing design hierarchy..
Top module:  \test_top
Used module:     \bin_to_disp
Used module:     $paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0
Used module:         $paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3
Used module:             \tree_nand
Used module:                 $paramod\tree_nand\WIDTH=16
Used module:                     $paramod\tree_nand\WIDTH=8
Used module:         $paramod\debouncer\TOT_CKS=1
Used module:     $paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1
Used module:     $paramod\debouncer\TOT_CKS=250000
Parameter \WIDTH = 5
Found cached RTLIL representation for module `$paramod\tree_nand\WIDTH=5'.
Parameter \WIDTH = 5
Found cached RTLIL representation for module `$paramod\tree_nand\WIDTH=5'.
Parameter \WIDTH = 5
Found cached RTLIL representation for module `$paramod\tree_nand\WIDTH=5'.
Parameter \WIDTH = 4

8.2.14. Executing AST frontend in derive mode using pre-parsed AST for module `\tree_nand'.
Parameter \WIDTH = 4
Generating RTLIL representation for module `$paramod\tree_nand\WIDTH=4'.
Parameter \WIDTH = 4
Found cached RTLIL representation for module `$paramod\tree_nand\WIDTH=4'.

8.2.15. Analyzing design hierarchy..
Top module:  \test_top
Used module:     \bin_to_disp
Used module:     $paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0
Used module:         $paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3
Used module:             $paramod\tree_nand\WIDTH=5
Used module:                 $paramod\tree_nand\WIDTH=3
Used module:                     \tree_nand
Used module:                         $paramod\tree_nand\WIDTH=16
Used module:                             $paramod\tree_nand\WIDTH=8
Used module:                                 $paramod\tree_nand\WIDTH=4
Used module:                 $paramod\tree_nand\WIDTH=2
Used module:         $paramod\debouncer\TOT_CKS=1
Used module:     $paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1
Used module:     $paramod\debouncer\TOT_CKS=250000
Parameter \WIDTH = 2
Found cached RTLIL representation for module `$paramod\tree_nand\WIDTH=2'.
Parameter \WIDTH = 1

8.2.16. Executing AST frontend in derive mode using pre-parsed AST for module `\tree_nand'.
Parameter \WIDTH = 1
Generating RTLIL representation for module `$paramod\tree_nand\WIDTH=1'.
Parameter \WIDTH = 2
Found cached RTLIL representation for module `$paramod\tree_nand\WIDTH=2'.
Parameter \WIDTH = 2
Found cached RTLIL representation for module `$paramod\tree_nand\WIDTH=2'.

8.2.17. Analyzing design hierarchy..
Top module:  \test_top
Used module:     \bin_to_disp
Used module:     $paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0
Used module:         $paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3
Used module:             $paramod\tree_nand\WIDTH=5
Used module:                 $paramod\tree_nand\WIDTH=3
Used module:                     $paramod\tree_nand\WIDTH=2
Used module:                     $paramod\tree_nand\WIDTH=1
Used module:         $paramod\debouncer\TOT_CKS=1
Used module:     $paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1
Used module:     $paramod\debouncer\TOT_CKS=250000

8.2.18. Analyzing design hierarchy..
Top module:  \test_top
Used module:     \bin_to_disp
Used module:     $paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0
Used module:         $paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3
Used module:             $paramod\tree_nand\WIDTH=5
Used module:                 $paramod\tree_nand\WIDTH=3
Used module:                     $paramod\tree_nand\WIDTH=2
Used module:                     $paramod\tree_nand\WIDTH=1
Used module:         $paramod\debouncer\TOT_CKS=1
Used module:     $paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1
Used module:     $paramod\debouncer\TOT_CKS=250000
Removing unused module `$paramod\tree_nand\WIDTH=4'.
Removing unused module `$paramod\tree_nand\WIDTH=8'.
Removing unused module `$paramod\tree_nand\WIDTH=16'.
Removing unused module `\hprb_sink'.
Removing unused module `\hprb_source'.
Removing unused module `\debouncer'.
Removing unused module `\tree_nand'.
Removing unused module `\calc_redun'.
Removed 8 unused modules.
Mapping positional arguments of cell $paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3.$genblock$calc_redun.v:26$277[1].\t1 ($paramod\tree_nand\WIDTH=5).
Mapping positional arguments of cell $paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3.$genblock$calc_redun.v:26$276[0].\t1 ($paramod\tree_nand\WIDTH=5).
Mapping positional arguments of cell $paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3.t1 ($paramod\tree_nand\WIDTH=5).
Mapping positional arguments of cell $paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.r1 ($paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3).
Mapping positional arguments of cell $paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.md_calc_red0 ($paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3).

8.3. Executing PROC pass (convert processes to netlists).

8.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$debouncer.v:19$278 in module $paramod\debouncer\TOT_CKS=1.
Marked 5 switch rules as full_case in process $proc$test_1.v:91$90 in module test_top.
Marked 2 switch rules as full_case in process $proc$debouncer.v:19$361 in module $paramod\debouncer\TOT_CKS=250000.
Marked 2 switch rules as full_case in process $proc$hprb_source.v:44$333 in module $paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.
Marked 6 switch rules as full_case in process $proc$hprb_sink.v:48$293 in module $paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.
Marked 1 switch rules as full_case in process $proc$bin_to_disp.v:18$1 in module bin_to_disp.
Removed a total of 0 dead cases.

8.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 6 redundant assignments.
Promoted 53 assignments to connections.

8.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:17$292'.
  Set init value: \rg_stdy = 1'0
Found init rule in `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:16$291'.
  Set init value: \cnt_cks = 1'0
Found init rule in `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:15$290'.
  Set init value: \rg_dbn_rdy = 1'0
Found init rule in `\test_top.$proc$test_1.v:157$143'.
  Set init value: \rg_disp0 = 4'0000
Found init rule in `\test_top.$proc$test_1.v:62$139'.
  Set init value: \clk_4 = 1'0
Found init rule in `\test_top.$proc$test_1.v:61$138'.
  Set init value: \clk_3 = 1'0
Found init rule in `\test_top.$proc$test_1.v:60$137'.
  Set init value: \clk_2 = 1'0
Found init rule in `\test_top.$proc$test_1.v:59$136'.
  Set init value: \clk_1 = 1'0
Found init rule in `\test_top.$proc$test_1.v:58$135'.
  Set init value: \clk_0 = 1'0
Found init rule in `\test_top.$proc$test_1.v:56$134'.
  Set init value: \cnt_clk4 = 12'000000000000
Found init rule in `\test_top.$proc$test_1.v:55$133'.
  Set init value: \cnt_clk3 = 8'00000000
Found init rule in `\test_top.$proc$test_1.v:54$132'.
  Set init value: \cnt_clk2 = 6'000000
Found init rule in `\test_top.$proc$test_1.v:53$131'.
  Set init value: \cnt_clk1 = 4'0000
Found init rule in `\test_top.$proc$test_1.v:52$130'.
  Set init value: \cnt_clk0 = 3'000
Found init rule in `\test_top.$proc$test_1.v:40$128'.
  Set init value: \r_Switch_1 = 1'0
Found init rule in `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:17$375'.
  Set init value: \rg_stdy = 1'0
Found init rule in `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:16$374'.
  Set init value: \cnt_cks = 19'0000000000000000000
Found init rule in `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:15$373'.
  Set init value: \rg_dbn_rdy = 1'0
Found init rule in `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:36$360'.
  Set init value: \ro0_err = 1'0
Found init rule in `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:35$359'.
  Set init value: \ro0_req = 1'0
Found init rule in `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:34$358'.
  Set init value: \ro0_red = 3'000
Found init rule in `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:33$357'.
  Set init value: \ro0_dst = 6'000001
Found init rule in `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:32$356'.
  Set init value: \ro0_dat = 3'000
Found init rule in `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:31$355'.
  Set init value: \ro0_src = 6'000000
Found init rule in `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:30$354'.
  Set init value: \ro0_busy = 1'0
Found init rule in `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:29$353'.
  Set init value: \ro0_has_red = 1'0
Found init rule in `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:28$352'.
  Set init value: \ro0_has_dat = 1'0
Found init rule in `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:27$351'.
  Set init value: \ro0_has_dst = 1'0
Found init rule in `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:24$350'.
  Set init value: \cnt_0 = 3'000
Found init rule in `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:22$349'.
  Set init value: \rg_rdy = 1'0
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$332'.
  Set init value: \inp0_err_error = 1'0
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$331'.
  Set init value: \inp0_err_red = 3'000
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$330'.
  Set init value: \inp0_err_dat = 3'000
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$329'.
  Set init value: \inp0_err_dst = 6'000000
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$328'.
  Set init value: \inp0_err_src = 6'000000
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:42$326'.
  Set init value: \inp0_back_dat = 3'111
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:41$325'.
  Set init value: \inp0_ack = 1'0
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:34$324'.
  Set init value: \inp0_redun = 3'000
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:32$323'.
  Set init value: \inp0_red = 3'000
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:32$322'.
  Set init value: \inp0_dat = 3'000
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:32$321'.
  Set init value: \inp0_dst = 6'000000
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:32$320'.
  Set init value: \inp0_src = 6'000000
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:31$319'.
  Set init value: \inp0_done_cks = 1'0
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:30$318'.
  Set init value: \inp0_has_redun = 1'0
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:29$317'.
  Set init value: \has_inp0 = 1'0
Found init rule in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:26$316'.
  Set init value: \rg_rdy = 1'0
Found init rule in `\bin_to_disp.$proc$bin_to_disp.v:16$2'.
  Set init value: \r_Hex_Encoding = 7'0000000

8.3.5. Executing PROC_ARST pass (detect async resets in processes).

8.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:17$292'.
Creating decoders for process `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:16$291'.
Creating decoders for process `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:15$290'.
Creating decoders for process `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:19$278'.
     1/3: $0\rg_stdy[0:0]
     2/3: $0\cnt_cks[0:0]
     3/3: $0\rg_dbn_rdy[0:0]
Creating decoders for process `\test_top.$proc$test_1.v:157$143'.
Creating decoders for process `\test_top.$proc$test_1.v:69$142'.
Creating decoders for process `\test_top.$proc$test_1.v:68$141'.
Creating decoders for process `\test_top.$proc$test_1.v:67$140'.
Creating decoders for process `\test_top.$proc$test_1.v:62$139'.
Creating decoders for process `\test_top.$proc$test_1.v:61$138'.
Creating decoders for process `\test_top.$proc$test_1.v:60$137'.
Creating decoders for process `\test_top.$proc$test_1.v:59$136'.
Creating decoders for process `\test_top.$proc$test_1.v:58$135'.
Creating decoders for process `\test_top.$proc$test_1.v:56$134'.
Creating decoders for process `\test_top.$proc$test_1.v:55$133'.
Creating decoders for process `\test_top.$proc$test_1.v:54$132'.
Creating decoders for process `\test_top.$proc$test_1.v:53$131'.
Creating decoders for process `\test_top.$proc$test_1.v:52$130'.
Creating decoders for process `\test_top.$proc$test_1.v:44$129'.
Creating decoders for process `\test_top.$proc$test_1.v:40$128'.
Creating decoders for process `\test_top.$proc$test_1.v:159$113'.
     1/1: $0\rg_disp0[3:0]
Creating decoders for process `\test_top.$proc$test_1.v:91$90'.
     1/10: $0\cnt_clk4[11:0]
     2/10: $0\cnt_clk3[7:0]
     3/10: $0\cnt_clk2[5:0]
     4/10: $0\cnt_clk1[3:0]
     5/10: $0\cnt_clk0[2:0]
     6/10: $0\clk_4[0:0]
     7/10: $0\clk_3[0:0]
     8/10: $0\clk_2[0:0]
     9/10: $0\clk_1[0:0]
    10/10: $0\clk_0[0:0]
Creating decoders for process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:17$375'.
Creating decoders for process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:16$374'.
Creating decoders for process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:15$373'.
Creating decoders for process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:19$361'.
     1/3: $0\rg_stdy[0:0]
     2/3: $0\cnt_cks[18:0]
     3/3: $0\rg_dbn_rdy[0:0]
Creating decoders for process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:36$360'.
Creating decoders for process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:35$359'.
Creating decoders for process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:34$358'.
Creating decoders for process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:33$357'.
Creating decoders for process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:32$356'.
Creating decoders for process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:31$355'.
Creating decoders for process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:30$354'.
Creating decoders for process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:29$353'.
Creating decoders for process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:28$352'.
Creating decoders for process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:27$351'.
Creating decoders for process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:24$350'.
Creating decoders for process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:22$349'.
Creating decoders for process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
     1/12: $0\ro0_err[0:0]
     2/12: $0\ro0_req[0:0]
     3/12: $0\ro0_red[2:0]
     4/12: $0\ro0_dst[5:0]
     5/12: $0\ro0_dat[2:0]
     6/12: $0\ro0_src[5:0]
     7/12: $0\ro0_busy[0:0]
     8/12: $0\ro0_has_red[0:0]
     9/12: $0\ro0_has_dat[0:0]
    10/12: $0\ro0_has_dst[0:0]
    11/12: $0\cnt_0[2:0]
    12/12: $0\rg_rdy[0:0]
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$332'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$331'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$330'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$329'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$328'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:43$327'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:42$326'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:41$325'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:34$324'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:32$323'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:32$322'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:32$321'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:32$320'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:31$319'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:30$318'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:29$317'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:26$316'.
Creating decoders for process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
     1/16: $0\inp0_err_error[0:0]
     2/16: $0\inp0_err_red[2:0]
     3/16: $0\inp0_err_dat[2:0]
     4/16: $0\inp0_err_dst[5:0]
     5/16: $0\inp0_err_src[5:0]
     6/16: $0\inp0_back_dat[2:0]
     7/16: $0\inp0_ack[0:0]
     8/16: $0\inp0_redun[2:0]
     9/16: $0\inp0_red[2:0]
    10/16: $0\inp0_dat[2:0]
    11/16: $0\inp0_dst[5:0]
    12/16: $0\inp0_src[5:0]
    13/16: $0\inp0_done_cks[0:0]
    14/16: $0\inp0_has_redun[0:0]
    15/16: $0\has_inp0[0:0]
    16/16: $0\rg_rdy[0:0]
Creating decoders for process `\bin_to_disp.$proc$bin_to_disp.v:16$2'.
Creating decoders for process `\bin_to_disp.$proc$bin_to_disp.v:18$1'.
     1/1: $0\r_Hex_Encoding[6:0]

8.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\test_top.\r_LED_4' from process `\test_top.$proc$test_1.v:69$142'.
No latch inferred for signal `\test_top.\r_LED_3' from process `\test_top.$proc$test_1.v:68$141'.
No latch inferred for signal `\test_top.\r_LED_2' from process `\test_top.$proc$test_1.v:67$140'.
No latch inferred for signal `\test_top.\reset' from process `\test_top.$proc$test_1.v:44$129'.
No latch inferred for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_err' from process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:43$327'.

8.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\debouncer\TOT_CKS=1.\rg_dbn_rdy' using process `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:19$278'.
  created $dff cell `$procdff$859' with positive edge clock.
Creating register for signal `$paramod\debouncer\TOT_CKS=1.\cnt_cks' using process `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:19$278'.
  created $dff cell `$procdff$860' with positive edge clock.
Creating register for signal `$paramod\debouncer\TOT_CKS=1.\rg_stdy' using process `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:19$278'.
  created $dff cell `$procdff$861' with positive edge clock.
Creating register for signal `\test_top.\r_Switch_1' using process `\test_top.$proc$test_1.v:159$113'.
  created $dff cell `$procdff$862' with positive edge clock.
Creating register for signal `\test_top.\rg_disp0' using process `\test_top.$proc$test_1.v:159$113'.
  created $dff cell `$procdff$863' with positive edge clock.
Creating register for signal `\test_top.\cnt_clk0' using process `\test_top.$proc$test_1.v:91$90'.
  created $dff cell `$procdff$864' with positive edge clock.
Creating register for signal `\test_top.\cnt_clk1' using process `\test_top.$proc$test_1.v:91$90'.
  created $dff cell `$procdff$865' with positive edge clock.
Creating register for signal `\test_top.\cnt_clk2' using process `\test_top.$proc$test_1.v:91$90'.
  created $dff cell `$procdff$866' with positive edge clock.
Creating register for signal `\test_top.\cnt_clk3' using process `\test_top.$proc$test_1.v:91$90'.
  created $dff cell `$procdff$867' with positive edge clock.
Creating register for signal `\test_top.\cnt_clk4' using process `\test_top.$proc$test_1.v:91$90'.
  created $dff cell `$procdff$868' with positive edge clock.
Creating register for signal `\test_top.\clk_0' using process `\test_top.$proc$test_1.v:91$90'.
  created $dff cell `$procdff$869' with positive edge clock.
Creating register for signal `\test_top.\clk_1' using process `\test_top.$proc$test_1.v:91$90'.
  created $dff cell `$procdff$870' with positive edge clock.
Creating register for signal `\test_top.\clk_2' using process `\test_top.$proc$test_1.v:91$90'.
  created $dff cell `$procdff$871' with positive edge clock.
Creating register for signal `\test_top.\clk_3' using process `\test_top.$proc$test_1.v:91$90'.
  created $dff cell `$procdff$872' with positive edge clock.
Creating register for signal `\test_top.\clk_4' using process `\test_top.$proc$test_1.v:91$90'.
  created $dff cell `$procdff$873' with positive edge clock.
Creating register for signal `$paramod\debouncer\TOT_CKS=250000.\rg_dbn_rdy' using process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:19$361'.
  created $dff cell `$procdff$874' with positive edge clock.
Creating register for signal `$paramod\debouncer\TOT_CKS=250000.\cnt_cks' using process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:19$361'.
  created $dff cell `$procdff$875' with positive edge clock.
Creating register for signal `$paramod\debouncer\TOT_CKS=250000.\rg_stdy' using process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:19$361'.
  created $dff cell `$procdff$876' with positive edge clock.
Creating register for signal `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.\rg_rdy' using process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
  created $dff cell `$procdff$877' with positive edge clock.
Creating register for signal `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.\cnt_0' using process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
  created $dff cell `$procdff$878' with positive edge clock.
Creating register for signal `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.\ro0_has_dst' using process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
  created $dff cell `$procdff$879' with positive edge clock.
Creating register for signal `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.\ro0_has_dat' using process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
  created $dff cell `$procdff$880' with positive edge clock.
Creating register for signal `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.\ro0_has_red' using process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
  created $dff cell `$procdff$881' with positive edge clock.
Creating register for signal `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.\ro0_busy' using process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
  created $dff cell `$procdff$882' with positive edge clock.
Creating register for signal `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.\ro0_src' using process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
  created $dff cell `$procdff$883' with positive edge clock.
Creating register for signal `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.\ro0_dat' using process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
  created $dff cell `$procdff$884' with positive edge clock.
Creating register for signal `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.\ro0_dst' using process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
  created $dff cell `$procdff$885' with positive edge clock.
Creating register for signal `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.\ro0_red' using process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
  created $dff cell `$procdff$886' with positive edge clock.
Creating register for signal `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.\ro0_req' using process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
  created $dff cell `$procdff$887' with positive edge clock.
Creating register for signal `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.\ro0_err' using process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
  created $dff cell `$procdff$888' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\rg_rdy' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$889' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\has_inp0' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$890' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_has_redun' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$891' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_done_cks' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$892' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_src' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$893' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_dst' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$894' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_dat' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$895' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_red' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$896' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_redun' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$897' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_ack' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$898' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_back_dat' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$899' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_err_src' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$900' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_err_dst' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$901' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_err_dat' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$902' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_err_red' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$903' with positive edge clock.
Creating register for signal `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.\inp0_err_error' using process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
  created $dff cell `$procdff$904' with positive edge clock.
Creating register for signal `\bin_to_disp.\r_Hex_Encoding' using process `\bin_to_disp.$proc$bin_to_disp.v:18$1'.
  created $dff cell `$procdff$905' with positive edge clock.

8.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:17$292'.
Removing empty process `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:16$291'.
Removing empty process `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:15$290'.
Found and cleaned up 5 empty switches in `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:19$278'.
Removing empty process `$paramod\debouncer\TOT_CKS=1.$proc$debouncer.v:19$278'.
Removing empty process `test_top.$proc$test_1.v:157$143'.
Removing empty process `test_top.$proc$test_1.v:69$142'.
Removing empty process `test_top.$proc$test_1.v:68$141'.
Removing empty process `test_top.$proc$test_1.v:67$140'.
Removing empty process `test_top.$proc$test_1.v:62$139'.
Removing empty process `test_top.$proc$test_1.v:61$138'.
Removing empty process `test_top.$proc$test_1.v:60$137'.
Removing empty process `test_top.$proc$test_1.v:59$136'.
Removing empty process `test_top.$proc$test_1.v:58$135'.
Removing empty process `test_top.$proc$test_1.v:56$134'.
Removing empty process `test_top.$proc$test_1.v:55$133'.
Removing empty process `test_top.$proc$test_1.v:54$132'.
Removing empty process `test_top.$proc$test_1.v:53$131'.
Removing empty process `test_top.$proc$test_1.v:52$130'.
Removing empty process `test_top.$proc$test_1.v:44$129'.
Removing empty process `test_top.$proc$test_1.v:40$128'.
Found and cleaned up 1 empty switch in `\test_top.$proc$test_1.v:159$113'.
Removing empty process `test_top.$proc$test_1.v:159$113'.
Found and cleaned up 5 empty switches in `\test_top.$proc$test_1.v:91$90'.
Removing empty process `test_top.$proc$test_1.v:91$90'.
Removing empty process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:17$375'.
Removing empty process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:16$374'.
Removing empty process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:15$373'.
Found and cleaned up 5 empty switches in `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:19$361'.
Removing empty process `$paramod\debouncer\TOT_CKS=250000.$proc$debouncer.v:19$361'.
Removing empty process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:36$360'.
Removing empty process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:35$359'.
Removing empty process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:34$358'.
Removing empty process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:33$357'.
Removing empty process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:32$356'.
Removing empty process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:31$355'.
Removing empty process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:30$354'.
Removing empty process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:29$353'.
Removing empty process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:28$352'.
Removing empty process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:27$351'.
Removing empty process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:24$350'.
Removing empty process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:22$349'.
Found and cleaned up 9 empty switches in `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
Removing empty process `$paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.$proc$hprb_source.v:44$333'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$332'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$331'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$330'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$329'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:45$328'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:43$327'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:42$326'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:41$325'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:34$324'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:32$323'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:32$322'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:32$321'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:32$320'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:31$319'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:30$318'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:29$317'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:26$316'.
Found and cleaned up 14 empty switches in `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
Removing empty process `$paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.$proc$hprb_sink.v:48$293'.
Removing empty process `bin_to_disp.$proc$bin_to_disp.v:16$2'.
Found and cleaned up 1 empty switch in `\bin_to_disp.$proc$bin_to_disp.v:18$1'.
Removing empty process `bin_to_disp.$proc$bin_to_disp.v:18$1'.
Cleaned up 40 empty switches.

8.4. Executing FLATTEN pass (flatten design).
Using template $paramod\debouncer\TOT_CKS=250000 for cells of type $paramod\debouncer\TOT_CKS=250000.
Using template $paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0 for cells of type $paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.
Using template $paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1 for cells of type $paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.
Using template bin_to_disp for cells of type bin_to_disp.
Using template $paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3 for cells of type $paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3.
Using template $paramod\debouncer\TOT_CKS=1 for cells of type $paramod\debouncer\TOT_CKS=1.
Using template $paramod\tree_nand\WIDTH=5 for cells of type $paramod\tree_nand\WIDTH=5.
Using template $paramod\tree_nand\WIDTH=3 for cells of type $paramod\tree_nand\WIDTH=3.
Using template $paramod\tree_nand\WIDTH=2 for cells of type $paramod\tree_nand\WIDTH=2.
Using template $paramod\tree_nand\WIDTH=1 for cells of type $paramod\tree_nand\WIDTH=1.
<suppressed ~39 debug messages>
No more expansions possible.
Deleting now unused module $paramod\debouncer\TOT_CKS=1.
Deleting now unused module $paramod\calc_redun\ASZ=6\DSZ=3\RSZ=3.
Deleting now unused module $paramod\tree_nand\WIDTH=1.
Deleting now unused module $paramod\tree_nand\WIDTH=5.
Deleting now unused module $paramod\tree_nand\WIDTH=2.
Deleting now unused module $paramod\tree_nand\WIDTH=3.
Deleting now unused module $paramod\debouncer\TOT_CKS=250000.
Deleting now unused module $paramod\hprb_source\MY_LOCAL_ADDR=0\PRB_DST_ADDR=1.
Deleting now unused module $paramod\hprb_sink\MY_LOCAL_ADDR=1\PRB_SRC_ADDR=0.
Deleting now unused module bin_to_disp.

8.5. Executing TRIBUF pass.

8.6. Executing DEMINOUT pass (demote inout ports to input or output).

8.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.
<suppressed ~147 debug messages>

8.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 93 unused cells and 527 unused wires.
<suppressed ~107 debug messages>

8.9. Executing CHECK pass (checking for obvious problems).
checking module test_top..
found and reported 0 problems.

8.10. Executing OPT pass (performing simple optimizations).

8.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

8.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

8.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $techmap\io_dst.$procmux$840: \io_dst.rg_rdy -> 1'1
      Replacing known input bits on port B of cell $techmap\io_dst.it_check_rcv0_req.$procmux$405: \io_dst.it_check_rcv0_req.rg_dbn_rdy -> 1'1
      Replacing known input bits on port B of cell $techmap\it_but_1.$procmux$460: \it_but_1.rg_dbn_rdy -> 1'1
      Replacing known input bits on port B of cell $techmap\it_src.$procmux$568: \it_src.rg_rdy -> 1'1
      Replacing known input bits on port B of cell $techmap\it_src.it_check_snd0_ack.$procmux$405: \it_src.it_check_snd0_ack.rg_dbn_rdy -> 1'1
  Analyzing evaluation results.
    dead port 1/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 2/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 3/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 4/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 5/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 6/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 7/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 8/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 9/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 10/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 11/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 12/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 13/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 14/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 16/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 17/17 on $pmux $techmap\disp_1.$procmux$842.
    dead port 1/2 on $mux $techmap\io_dst.$procmux$797.
    dead port 1/2 on $mux $techmap\io_dst.it_check_rcv0_req.$procmux$394.
    dead port 1/2 on $mux $techmap\it_but_1.$procmux$449.
    dead port 1/2 on $mux $techmap\it_src.it_check_snd0_ack.$procmux$394.
Removed 20 multiplexer ports.
<suppressed ~58 debug messages>

8.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_top.
Performed a total of 0 changes.

8.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

8.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $techmap\it_src.$procdff$883 ($dff) from module test_top.
Promoting init spec \cnt_clk1 = 4'0000 to constant driver in module test_top.
Promoting init spec \cnt_clk2 = 6'000000 to constant driver in module test_top.
Promoting init spec \cnt_clk3 = 8'00000000 to constant driver in module test_top.
Promoting init spec \cnt_clk4 = 12'000000000000 to constant driver in module test_top.
Promoting init spec \clk_1 = 1'0 to constant driver in module test_top.
Promoting init spec \clk_2 = 1'0 to constant driver in module test_top.
Promoting init spec \clk_3 = 1'0 to constant driver in module test_top.
Promoting init spec \clk_4 = 1'0 to constant driver in module test_top.
Promoting init spec \io_dst.inp0_err_red = 3'000 to constant driver in module test_top.
Promoting init spec \io_dst.inp0_err_dat = 3'000 to constant driver in module test_top.
Promoting init spec \io_dst.inp0_err_dst = 6'000000 to constant driver in module test_top.
Promoting init spec \io_dst.inp0_err_src = 6'000000 to constant driver in module test_top.
Promoting init spec \it_src.ro0_err = 1'0 to constant driver in module test_top.
Promoting init spec \it_src.ro0_busy = 1'0 to constant driver in module test_top.
Promoted 14 init specs to constant drivers.
Replaced 1 DFF cells.

8.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 1 unused cells and 6 unused wires.
<suppressed ~2 debug messages>

8.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.
<suppressed ~11 debug messages>

8.10.9. Rerunning OPT passes. (Maybe there is more to do..)

8.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

8.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_top.
Performed a total of 0 changes.

8.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

8.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

8.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

8.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

8.10.16. Finished OPT passes. (There is nothing left to do.)

8.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 19) from port B of cell test_top.$techmap\it_but_1.$eq$debouncer.v:37$372 ($eq).
Removed top 31 bits (of 32) from port B of cell test_top.$techmap\it_but_1.$add$debouncer.v:34$371 ($add).
Removed top 13 bits (of 32) from port Y of cell test_top.$techmap\it_but_1.$add$debouncer.v:34$371 ($add).
Removed top 14 bits (of 32) from port B of cell test_top.$techmap\it_but_1.$lt$debouncer.v:33$369 ($lt).
Removed top 31 bits (of 32) from port B of cell test_top.$techmap\io_dst.$add$hprb_sink.v:98$310 ($add).
Removed top 28 bits (of 32) from port Y of cell test_top.$techmap\io_dst.$add$hprb_sink.v:98$310 ($add).
Removed top 29 bits (of 32) from port B of cell test_top.$techmap\io_dst.$le$hprb_sink.v:98$309 ($le).
Removed top 5 bits (of 6) from port B of cell test_top.$techmap\io_dst.$ne$hprb_sink.v:83$306 ($ne).
Removed top 31 bits (of 32) from port B of cell test_top.$techmap\it_src.$add$hprb_source.v:77$345 ($add).
Removed top 29 bits (of 32) from port Y of cell test_top.$techmap\it_src.$add$hprb_source.v:77$345 ($add).
Removed top 1 bits (of 7) from FF cell test_top.$techmap\disp_1.$procdff$905 ($dff).
Removed top 3 bits (of 4) from port B of cell test_top.$techmap\disp2.$procmux$857_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell test_top.$techmap\disp2.$procmux$856_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell test_top.$techmap\disp2.$procmux$855_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test_top.$techmap\disp2.$procmux$854_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test_top.$techmap\disp2.$procmux$853_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test_top.$techmap\disp2.$procmux$852_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test_top.$techmap\disp2.$procmux$851_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell test_top.$techmap\io_dst.it_check_rcv0_req.$add$debouncer.v:34$288 ($add).
Removed top 31 bits (of 32) from port Y of cell test_top.$techmap\io_dst.it_check_rcv0_req.$add$debouncer.v:34$288 ($add).
Removed top 31 bits (of 32) from port B of cell test_top.$techmap\io_dst.it_check_rcv0_req.$lt$debouncer.v:33$286 ($lt).
Removed top 31 bits (of 32) from port B of cell test_top.$techmap\it_src.it_check_snd0_ack.$add$debouncer.v:34$288 ($add).
Removed top 31 bits (of 32) from port Y of cell test_top.$techmap\it_src.it_check_snd0_ack.$add$debouncer.v:34$288 ($add).
Removed top 31 bits (of 32) from port B of cell test_top.$techmap\it_src.it_check_snd0_ack.$lt$debouncer.v:33$286 ($lt).
Removed top 1 bits (of 6) from FF cell test_top.$techmap\disp_1.$procdff$905 ($dff).
Removed top 28 bits (of 32) from wire test_top.$techmap\io_dst.$add$hprb_sink.v:98$310_Y.
Removed top 31 bits (of 32) from wire test_top.$techmap\io_dst.it_check_rcv0_req.$add$debouncer.v:34$288_Y.
Removed top 13 bits (of 32) from wire test_top.$techmap\it_but_1.$add$debouncer.v:34$371_Y.
Removed top 29 bits (of 32) from wire test_top.$techmap\it_src.$add$hprb_source.v:77$345_Y.
Removed top 1 bits (of 3) from wire test_top.io_dst.inp0_calc_redun.

8.12. Executing PEEPOPT pass (run peephole optimizers).
dffcemux pattern in test_top: dff=$procdff$863, cemux=$procmux$407, rstmux=n/a; removed 1 constant bits.

8.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

8.14. Executing SHARE pass (SAT-based resource sharing).

8.15. Executing TECHMAP pass (map to technology primitives).

8.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

8.15.2. Continuing TECHMAP pass.
Using template $paramod$ab4152cecfeef2ee3538c089cb776a1046599b45\_90_lut_cmp_ for cells of type $le.
Using template $paramod$3ade5096fa42da1a552310766643431522448eb6\_90_lut_cmp_ for cells of type $lt.
No more expansions possible.
<suppressed ~87 debug messages>

8.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.
<suppressed ~9 debug messages>

8.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 0 unused cells and 17 unused wires.
<suppressed ~1 debug messages>

8.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module test_top:
  creating $macc model for $techmap\io_dst.$add$hprb_sink.v:98$310 ($add).
  creating $macc model for $techmap\io_dst.it_check_rcv0_req.$add$debouncer.v:34$288 ($add).
  creating $macc model for $techmap\it_but_1.$add$debouncer.v:34$371 ($add).
  creating $macc model for $techmap\it_src.$add$hprb_source.v:77$345 ($add).
  creating $macc model for $techmap\it_src.it_check_snd0_ack.$add$debouncer.v:34$288 ($add).
  creating $alu model for $macc $techmap\it_src.it_check_snd0_ack.$add$debouncer.v:34$288.
  creating $alu model for $macc $techmap\it_src.$add$hprb_source.v:77$345.
  creating $alu model for $macc $techmap\it_but_1.$add$debouncer.v:34$371.
  creating $alu model for $macc $techmap\io_dst.it_check_rcv0_req.$add$debouncer.v:34$288.
  creating $alu model for $macc $techmap\io_dst.$add$hprb_sink.v:98$310.
  creating $alu model for $techmap\it_but_1.$lt$debouncer.v:33$369 ($lt): new $alu
  creating $alu model for $techmap\it_but_1.$eq$debouncer.v:37$372 ($eq): merged with $techmap\it_but_1.$lt$debouncer.v:33$369.
  creating $alu cell for $techmap\it_but_1.$lt$debouncer.v:33$369, $techmap\it_but_1.$eq$debouncer.v:37$372: $auto$alumacc.cc:485:replace_alu$917
  creating $alu cell for $techmap\io_dst.$add$hprb_sink.v:98$310: $auto$alumacc.cc:485:replace_alu$928
  creating $alu cell for $techmap\io_dst.it_check_rcv0_req.$add$debouncer.v:34$288: $auto$alumacc.cc:485:replace_alu$931
  creating $alu cell for $techmap\it_but_1.$add$debouncer.v:34$371: $auto$alumacc.cc:485:replace_alu$934
  creating $alu cell for $techmap\it_src.$add$hprb_source.v:77$345: $auto$alumacc.cc:485:replace_alu$937
  creating $alu cell for $techmap\it_src.it_check_snd0_ack.$add$debouncer.v:34$288: $auto$alumacc.cc:485:replace_alu$940
  created 6 $alu and 0 $macc cells.

8.19. Executing OPT pass (performing simple optimizations).

8.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

8.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

8.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/17 on $pmux $techmap\disp2.$procmux$842.
    dead port 2/17 on $pmux $techmap\disp2.$procmux$842.
    dead port 3/17 on $pmux $techmap\disp2.$procmux$842.
    dead port 4/17 on $pmux $techmap\disp2.$procmux$842.
    dead port 5/17 on $pmux $techmap\disp2.$procmux$842.
    dead port 6/17 on $pmux $techmap\disp2.$procmux$842.
    dead port 7/17 on $pmux $techmap\disp2.$procmux$842.
    dead port 8/17 on $pmux $techmap\disp2.$procmux$842.
Removed 8 multiplexer ports.
<suppressed ~56 debug messages>

8.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_top.
    New input vector for $reduce_and cell $auto$alumacc.cc:75:get_eq$922: { $auto$alumacc.cc:501:replace_alu$918 [0] $auto$alumacc.cc:501:replace_alu$918 [1] $auto$alumacc.cc:501:replace_alu$918 [2] $auto$alumacc.cc:501:replace_alu$918 [3] $auto$alumacc.cc:501:replace_alu$918 [4] $auto$alumacc.cc:501:replace_alu$918 [5] $auto$alumacc.cc:501:replace_alu$918 [6] $auto$alumacc.cc:501:replace_alu$918 [7] $auto$alumacc.cc:501:replace_alu$918 [8] $auto$alumacc.cc:501:replace_alu$918 [9] $auto$alumacc.cc:501:replace_alu$918 [10] $auto$alumacc.cc:501:replace_alu$918 [11] $auto$alumacc.cc:501:replace_alu$918 [12] $auto$alumacc.cc:501:replace_alu$918 [13] $auto$alumacc.cc:501:replace_alu$918 [14] $auto$alumacc.cc:501:replace_alu$918 [15] $auto$alumacc.cc:501:replace_alu$918 [16] $auto$alumacc.cc:501:replace_alu$918 [17] $auto$alumacc.cc:501:replace_alu$918 [18] }
  Optimizing cells in module \test_top.
Performed a total of 1 changes.

8.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

8.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

8.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

8.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

8.19.9. Rerunning OPT passes. (Maybe there is more to do..)

8.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

8.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_top.
Performed a total of 0 changes.

8.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

8.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

8.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

8.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

8.19.16. Finished OPT passes. (There is nothing left to do.)

8.20. Executing FSM pass (extract and optimize FSM).

8.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking test_top.disp2.r_Hex_Encoding as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking test_top.io_dst.inp0_src as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking test_top.it_src.ro0_dst as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

8.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

8.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

8.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

8.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

8.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

8.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

8.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

8.21. Executing OPT pass (performing simple optimizations).

8.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

8.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

8.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

8.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

8.21.5. Finished fast OPT passes.

8.22. Executing MEMORY pass.

8.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

8.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

8.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

8.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

8.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

8.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

8.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

8.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

8.25. Executing TECHMAP pass (map to technology primitives).

8.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

8.25.2. Continuing TECHMAP pass.
No more expansions possible.

8.26. Executing ICE40_BRAMINIT pass.

8.27. Executing OPT pass (performing simple optimizations).

8.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.
<suppressed ~2 debug messages>

8.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

8.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

8.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

8.27.5. Finished fast OPT passes.

8.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

8.29. Executing OPT pass (performing simple optimizations).

8.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

8.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

8.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

8.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test_top.
Performed a total of 0 changes.

8.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

8.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

8.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

8.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

8.29.9. Finished OPT passes. (There is nothing left to do.)

8.30. Executing ICE40_WRAPCARRY pass (wrap carries).

8.31. Executing TECHMAP pass (map to technology primitives).

8.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

8.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

8.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $nex.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=18\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=19\Y_WIDTH=19 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=1 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_or.
No more expansions possible.
<suppressed ~537 debug messages>

8.32. Executing ICE40_OPT pass (performing simple optimizations).

8.32.1. Running ICE40 specific optimizations.

8.32.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.
<suppressed ~184 debug messages>

8.32.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
<suppressed ~159 debug messages>
Removed a total of 53 cells.

8.32.4. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:420:simplemap_dff$1492 ($_DFF_P_) from module test_top.
Replaced 1 DFF cells.

8.32.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 8 unused cells and 182 unused wires.
<suppressed ~9 debug messages>

8.32.6. Rerunning OPT passes. (Removed registers in this run.)

8.32.7. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$917.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$917.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$928.slice[0].carry: CO=\io_dst.inp0_back_dat [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$928.slice[3].carry: CO=1'0
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$934.slice[0].carry: CO=\it_but_1.cnt_cks [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) test_top.$auto$alumacc.cc:485:replace_alu$937.slice[0].carry: CO=\it_src.cnt_0 [0]

8.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.
<suppressed ~1 debug messages>

8.32.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

8.32.10. Executing OPT_RMDFF pass (remove dff with constant values).

8.32.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

8.32.12. Rerunning OPT passes. (Removed registers in this run.)

8.32.13. Running ICE40 specific optimizations.

8.32.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

8.32.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

8.32.16. Executing OPT_RMDFF pass (remove dff with constant values).

8.32.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

8.32.18. Finished OPT passes. (There is nothing left to do.)

8.33. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

8.34. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module test_top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1084 to $_DFFE_PP_ for $0\rg_disp0[3:0] [0] -> \rg_disp0 [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1085 to $_DFFE_PP_ for $0\rg_disp0[3:0] [1] -> \rg_disp0 [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1086 to $_DFFE_PP_ for $0\rg_disp0[3:0] [2] -> \rg_disp0 [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1090 to $_DFFE_PP_ for $0\clk_0[0:0] -> \clk_0.

8.35. Executing TECHMAP pass (map to technology primitives).

8.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

8.35.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~93 debug messages>

8.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.
<suppressed ~7 debug messages>

8.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping test_top.$auto$alumacc.cc:485:replace_alu$928.slice[0].carry ($lut).
Mapping test_top.$auto$alumacc.cc:485:replace_alu$928.slice[3].carry ($lut).
Mapping test_top.$auto$alumacc.cc:485:replace_alu$934.slice[0].carry ($lut).
Mapping test_top.$auto$alumacc.cc:485:replace_alu$937.slice[0].carry ($lut).

8.38. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in test_top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1632 (SB_DFF): \it_src.it_check_snd0_ack.rg_dbn_rdy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1347 (SB_DFF): \it_src.ro0_red [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1353 (SB_DFF): \it_src.ro0_dst [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1354 (SB_DFF): \it_src.ro0_dst [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1024 (SB_DFF): \it_but_1.cnt_cks [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1025 (SB_DFF): \it_but_1.cnt_cks [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1026 (SB_DFF): \it_but_1.cnt_cks [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1027 (SB_DFF): \it_but_1.cnt_cks [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1028 (SB_DFF): \it_but_1.cnt_cks [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1029 (SB_DFF): \it_but_1.cnt_cks [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1030 (SB_DFF): \it_but_1.cnt_cks [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1031 (SB_DFF): \it_but_1.cnt_cks [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1032 (SB_DFF): \it_but_1.cnt_cks [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1033 (SB_DFF): \it_but_1.cnt_cks [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1034 (SB_DFF): \it_but_1.cnt_cks [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1035 (SB_DFF): \it_but_1.cnt_cks [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1036 (SB_DFF): \it_but_1.cnt_cks [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1037 (SB_DFF): \it_but_1.cnt_cks [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1038 (SB_DFF): \it_but_1.cnt_cks [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1039 (SB_DFF): \it_but_1.cnt_cks [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1085 (SB_DFFE): \rg_disp0 [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1021 (SB_DFF): \it_but_1.cnt_cks [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1040 (SB_DFF): \it_but_1.rg_dbn_rdy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1611 (SB_DFF): \io_dst.it_check_rcv0_req.rg_stdy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1086 (SB_DFFE): \rg_disp0 [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1088 (SB_DFF): \cnt_clk0 [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1084 (SB_DFFE): \rg_disp0 [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1089 (SB_DFF): \cnt_clk0 [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1135 (SB_DFF): \io_dst.rg_rdy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1500 (SB_DFF): \disp2.r_Hex_Encoding [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1116 (SB_DFF): \io_dst.inp0_red [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1115 (SB_DFF): \io_dst.inp0_red [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1118 (SB_DFF): \io_dst.inp0_dat [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1108 (SB_DFF): \io_dst.inp0_back_dat [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1107 (SB_DFF): \io_dst.inp0_back_dat [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1110 (SB_DFF): \io_dst.inp0_ack = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1109 (SB_DFF): \io_dst.inp0_back_dat [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1112 (SB_DFF): \io_dst.inp0_redun [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1111 (SB_DFF): \io_dst.inp0_redun [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1113 (SB_DFF): \io_dst.inp0_redun [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1493 (SB_DFF): \disp_1.r_Hex_Encoding [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1114 (SB_DFF): \io_dst.inp0_red [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1119 (SB_DFF): \io_dst.inp0_dat [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1121 (SB_DFF): \io_dst.inp0_dst [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1117 (SB_DFF): \io_dst.inp0_dat [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1122 (SB_DFF): \io_dst.inp0_dst [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1123 (SB_DFF): \io_dst.inp0_dst [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1124 (SB_DFF): \io_dst.inp0_dst [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1125 (SB_DFF): \io_dst.inp0_dst [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1127 (SB_DFF): \io_dst.inp0_src [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1120 (SB_DFF): \io_dst.inp0_dst [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1128 (SB_DFF): \io_dst.inp0_src [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1129 (SB_DFF): \io_dst.inp0_src [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1130 (SB_DFF): \io_dst.inp0_src [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1131 (SB_DFF): \io_dst.inp0_src [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1498 (SB_DFF): \disp2.r_Hex_Encoding [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1126 (SB_DFF): \io_dst.inp0_src [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1132 (SB_DFF): \io_dst.inp0_done_cks = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1133 (SB_DFF): \io_dst.inp0_has_redun = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1134 (SB_DFF): \io_dst.has_inp0 = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1356 (SB_DFF): \it_src.ro0_dat [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1022 (SB_DFF): \it_but_1.cnt_cks [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1345 (SB_DFF): \it_src.ro0_req = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1020 (SB_DFF): \it_but_1.rg_stdy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1346 (SB_DFF): \it_src.ro0_red [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1348 (SB_DFF): \it_src.ro0_red [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1350 (SB_DFF): \it_src.ro0_dst [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1351 (SB_DFF): \it_src.ro0_dst [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1352 (SB_DFF): \it_src.ro0_dst [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1023 (SB_DFF): \it_but_1.cnt_cks [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1349 (SB_DFF): \it_src.ro0_dst [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1357 (SB_DFF): \it_src.ro0_dat [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1090 (SB_DFFE): \clk_0 = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1355 (SB_DFF): \it_src.ro0_dat [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1381 (SB_DFF): \it_src.ro0_has_red = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1382 (SB_DFF): \it_src.ro0_has_dat = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1383 (SB_DFF): \it_src.ro0_has_dst = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1386 (SB_DFF): \it_src.cnt_0 [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1499 (SB_DFF): \disp2.r_Hex_Encoding [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1384 (SB_DFF): \it_src.cnt_0 [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1087 (SB_DFF): \cnt_clk0 [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1385 (SB_DFF): \it_src.cnt_0 [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1106 (SB_DFF): \io_dst.inp0_err_error = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1387 (SB_DFF): \it_src.rg_rdy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1501 (SB_DFF): \disp2.r_Hex_Encoding [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1502 (SB_DFF): \disp2.r_Hex_Encoding [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1503 (SB_DFF): \disp2.r_Hex_Encoding [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1083 (SB_DFF): \r_Switch_1 = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1497 (SB_DFF): \disp2.r_Hex_Encoding [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1612 (SB_DFF): \io_dst.it_check_rcv0_req.cnt_cks = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1613 (SB_DFF): \io_dst.it_check_rcv0_req.rg_dbn_rdy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1630 (SB_DFF): \it_src.it_check_snd0_ack.rg_stdy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1631 (SB_DFF): \it_src.it_check_snd0_ack.cnt_cks = 0

8.39. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in test_top.
  Merging $auto$simplemap.cc:277:simplemap_mux$1633 (A=$techmap\it_src.it_check_snd0_ack.$logic_not$debouncer.v:25$282_Y, B=1'1, S=\it_src.it_check_snd0_ack.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1632 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1045 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [3], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1024 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1046 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [4], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1025 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1047 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [5], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1026 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1048 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [6], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1027 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1049 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [7], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1028 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1050 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [8], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1029 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1051 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [9], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1030 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1052 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [10], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1031 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1053 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [11], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1032 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1054 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [12], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1033 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1055 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [13], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1034 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1056 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [14], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1035 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1057 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [15], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1036 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1058 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [16], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1037 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1059 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [17], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1038 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1060 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [18], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1039 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1042 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [0], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1021 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1041 (A=$techmap\it_but_1.$logic_not$debouncer.v:25$365_Y, B=1'1, S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1040 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$998 (A=1'0, B=\cnt_clk0 [0], S=$auto$simplemap.cc:168:logic_reduce$1002) into $auto$simplemap.cc:420:simplemap_dff$1088 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$999 (A=1'0, B=\cnt_clk0 [1], S=$auto$simplemap.cc:168:logic_reduce$1002) into $auto$simplemap.cc:420:simplemap_dff$1089 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1136 (A=$techmap\io_dst.$logic_not$hprb_sink.v:54$297_Y, B=1'1, S=\io_dst.rg_rdy) into $auto$simplemap.cc:420:simplemap_dff$1135 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1832 (A=1'1, B=$techmap$techmap\disp2.$procmux$842.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1607_Y, S=$techmap$techmap\disp2.$procmux$842.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1595_Y) into $auto$simplemap.cc:420:simplemap_dff$1500 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1830 (A=1'1, B=$auto$simplemap.cc:127:simplemap_reduce$1889 [0], S=$techmap$techmap\disp2.$procmux$842.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1595_Y) into $auto$simplemap.cc:420:simplemap_dff$1498 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1043 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [1], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1022 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1044 (A=1'0, B=$techmap\it_but_1.$procmux$454_Y [2], S=\it_but_1.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1023 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1831 (A=1'1, B=$techmap$techmap\disp2.$procmux$842.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1606_Y, S=$techmap$techmap\disp2.$procmux$842.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1595_Y) into $auto$simplemap.cc:420:simplemap_dff$1499 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1388 (A=$techmap\it_src.$logic_not$hprb_source.v:50$337_Y, B=1'1, S=\it_src.rg_rdy) into $auto$simplemap.cc:420:simplemap_dff$1387 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1833 (A=1'1, B=$techmap$techmap\disp2.$procmux$842.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1608_Y, S=$techmap$techmap\disp2.$procmux$842.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1595_Y) into $auto$simplemap.cc:420:simplemap_dff$1501 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1834 (A=1'1, B=$techmap$techmap\disp2.$procmux$842.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1609_Y, S=$techmap$techmap\disp2.$procmux$842.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1595_Y) into $auto$simplemap.cc:420:simplemap_dff$1502 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1835 (A=1'1, B=$techmap$techmap\disp2.$procmux$842.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1610_Y, S=$techmap$techmap\disp2.$procmux$842.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1595_Y) into $auto$simplemap.cc:420:simplemap_dff$1503 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1829 (A=1'0, B=$techmap$techmap\disp2.$procmux$842.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1604_Y, S=$techmap$techmap\disp2.$procmux$842.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:445$1595_Y) into $auto$simplemap.cc:420:simplemap_dff$1497 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1615 (A=1'0, B=$techmap\io_dst.it_check_rcv0_req.$procmux$399_Y, S=\io_dst.it_check_rcv0_req.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1612 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1614 (A=$techmap\io_dst.it_check_rcv0_req.$logic_not$debouncer.v:25$282_Y, B=1'1, S=\io_dst.it_check_rcv0_req.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1613 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1634 (A=1'0, B=$techmap\it_src.it_check_snd0_ack.$procmux$399_Y, S=\it_src.it_check_snd0_ack.rg_dbn_rdy) into $auto$simplemap.cc:420:simplemap_dff$1631 (SB_DFF).

8.40. Executing ICE40_OPT pass (performing simple optimizations).

8.40.1. Running ICE40 specific optimizations.

8.40.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.
<suppressed ~180 debug messages>

8.40.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
<suppressed ~111 debug messages>
Removed a total of 37 cells.

8.40.4. Executing OPT_RMDFF pass (remove dff with constant values).

8.40.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..
Removed 31 unused cells and 346 unused wires.
<suppressed ~32 debug messages>

8.40.6. Rerunning OPT passes. (Removed registers in this run.)

8.40.7. Running ICE40 specific optimizations.

8.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test_top.

8.40.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test_top'.
Removed a total of 0 cells.

8.40.10. Executing OPT_RMDFF pass (remove dff with constant values).

8.40.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test_top..

8.40.12. Finished OPT passes. (There is nothing left to do.)

8.41. Executing TECHMAP pass (map to technology primitives).

8.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

8.41.2. Continuing TECHMAP pass.
No more expansions possible.

8.42. Executing ABC pass (technology mapping using ABC).

8.42.1. Extracting gate netlist of module `\test_top' to `<abc-temp-dir>/input.blif'..
Extracted 467 gates and 587 wires to a netlist network with 118 inputs and 119 outputs.

8.42.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     135.
ABC: Participating nodes from both networks       =     310.
ABC: Participating nodes from the first network   =     135. (  82.82 % of nodes)
ABC: Participating nodes from the second network  =     175. ( 107.36 % of nodes)
ABC: Node pairs (any polarity)                    =     135. (  82.82 % of names can be moved)
ABC: Node pairs (same polarity)                   =     130. (  79.75 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

8.42.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      162
ABC RESULTS:        internal signals:      350
ABC RESULTS:           input signals:      118
ABC RESULTS:          output signals:      119
Removing temp directory.

8.43. Executing ICE40_WRAPCARRY pass (wrap carries).

8.44. Executing TECHMAP pass (map to technology primitives).

8.44.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

8.44.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 20 unused cells and 367 unused wires.

8.45. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      183
  1-LUT               36
  2-LUT               15
  3-LUT               81
  4-LUT               51
  with \SB_CARRY      20

Eliminating LUTs.
Number of LUTs:      183
  1-LUT               36
  2-LUT               15
  3-LUT               81
  4-LUT               51
  with \SB_CARRY      20

Combining LUTs.
Number of LUTs:      181
  1-LUT               36
  2-LUT               13
  3-LUT               80
  4-LUT               52
  with \SB_CARRY      20

Eliminated 0 LUTs.
Combined 2 LUTs.
<suppressed ~761 debug messages>

8.46. Executing TECHMAP pass (map to technology primitives).

8.46.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

8.46.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10011110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
No more expansions possible.
<suppressed ~727 debug messages>
Removed 0 unused cells and 364 unused wires.

8.47. Executing AUTONAME pass.
Renamed 2170 objects in module test_top (24 iterations).
<suppressed ~491 debug messages>

8.48. Executing HIERARCHY pass (managing design hierarchy).

8.48.1. Analyzing design hierarchy..
Top module:  \test_top

8.48.2. Analyzing design hierarchy..
Top module:  \test_top
Removed 0 unused modules.

8.49. Printing statistics.

=== test_top ===

   Number of wires:                377
   Number of wire bits:            687
   Number of public wires:         377
   Number of public wire bits:     687
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                312
     SB_CARRY                       38
     SB_DFF                         54
     SB_DFFE                         4
     SB_DFFSR                       24
     SB_DFFSS                       11
     SB_LUT4                       181

8.50. Executing CHECK pass (checking for obvious problems).
checking module test_top..
found and reported 0 problems.

8.51. Executing JSON backend.

End of script. Logfile hash: fb1bf544bb
CPU: user 2.26s system 0.05s, MEM: 85.96 MB total, 46.27 MB resident
Yosys 0.9+932 (git sha1 613334d9, gcc 7.4.0-1ubuntu1~18.04.1 -fPIC -Os)
Time spent: 21% 19x opt_expr (0 sec), 18% 20x opt_clean (0 sec), ...
