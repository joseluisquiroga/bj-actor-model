/*
  bj-modules.ldf
*/

OUTPUT_FORMAT("elf32-epiphany", "elf32-epiphany", "elf32-epiphany")
OUTPUT_ARCH(epiphany)
ENTRY(_start)

PROVIDE (___bss_start = __bss_start);

/* =============================================================================================== 
USER DEFINED SIZES
*/

EXTERNAL_CODE_SIZE = 8M;	/* ready to exec shared code (.text, data, rodata, bss and .stack) */
EXTERNAL_LOAD_SIZE = 8M;	/* ready to load shared code (elf format)*/
EXTERNAL_DATA_SIZE = 8M;	/* shared data (a big struct) */
EXTERNAL_ALLOC_SIZE = 8M;	/* alloc (dynamic heap) shared data */ 

IVT_SIZE = 0x100;
CODE_SIZE = 5k - IVT_SIZE;
STACK_SIZE = 8k - CODE_SIZE - IVT_SIZE;
MODULE_SIZE = 12k;
ALLOC_SIZE = 12k;

/* =============================================================================================== */

EXTERNAL_ORIG = 0x8e000000;
EXTERNAL_CODE_ORIG = EXTERNAL_ORIG;
EXTERNAL_LOAD_ORIG = EXTERNAL_CODE_ORIG + EXTERNAL_CODE_SIZE;
EXTERNAL_DATA_ORIG = EXTERNAL_LOAD_ORIG + EXTERNAL_LOAD_SIZE;
EXTERNAL_ALLOC_ORIG = EXTERNAL_DATA_ORIG + EXTERNAL_DATA_SIZE;

IVT_ORIG = 0;
CODE_ORIG = IVT_ORIG + IVT_SIZE;
STACK_ORIG = CODE_ORIG + CODE_SIZE;
MODULE_ORIG = STACK_ORIG + STACK_SIZE;
ALLOC_ORIG = MODULE_ORIG + MODULE_SIZE;

STACK_END = MODULE_ORIG;

MEMORY
{
	IVT_RAM (WXAI) : ORIGIN = IVT_ORIG, LENGTH = IVT_SIZE

	CODE_RAM (WXAI) : ORIGIN = CODE_ORIG, LENGTH = CODE_SIZE

	MODULE_1 (WXAI) : ORIGIN = MODULE_ORIG, LENGTH = MODULE_SIZE
	MODULE_2 (WXAI) : ORIGIN = MODULE_ORIG, LENGTH = MODULE_SIZE
	MODULE_3 (WXAI) : ORIGIN = MODULE_ORIG, LENGTH = MODULE_SIZE
	MODULE_4 (WXAI) : ORIGIN = MODULE_ORIG, LENGTH = MODULE_SIZE
	MODULE_5 (WXAI) : ORIGIN = MODULE_ORIG, LENGTH = MODULE_SIZE
	MODULE_6 (WXAI) : ORIGIN = MODULE_ORIG, LENGTH = MODULE_SIZE
	MODULE_7 (WXAI) : ORIGIN = MODULE_ORIG, LENGTH = MODULE_SIZE
	MODULE_8 (WXAI) : ORIGIN = MODULE_ORIG, LENGTH = MODULE_SIZE
	MODULE_9 (WXAI) : ORIGIN = MODULE_ORIG, LENGTH = MODULE_SIZE

	ALLOC_RAM (WXAI) : ORIGIN = ALLOC_ORIG, LENGTH = ALLOC_SIZE

	EXTERNAL_CODE_RAM (WXAI)   : ORIGIN = EXTERNAL_CODE_ORIG, LENGTH = EXTERNAL_CODE_SIZE
	EXTERNAL_LOAD_RAM (WXAI)   : ORIGIN = EXTERNAL_LOAD_ORIG, LENGTH = EXTERNAL_LOAD_SIZE
	EXTERNAL_DATA_RAM (WXAI)   : ORIGIN = EXTERNAL_DATA_ORIG, LENGTH = EXTERNAL_DATA_SIZE
	EXTERNAL_ALLOC_RAM (WXAI)   : ORIGIN = EXTERNAL_ALLOC_ORIG, LENGTH = EXTERNAL_ALLOC_SIZE
}


SECTIONS
{
	ivt_reset               0x00 : {*.o(IVT_RESET)}                    > IVT_RAM
	ivt_software_exception  0x04 : {*.o(ivt_entry_software_exception)} > IVT_RAM
	ivt_page_miss           0x08 : {*.o(ivt_entry_page_miss)}          > IVT_RAM
	ivt_timer0              0x0c : {*.o(ivt_entry_timer0)}             > IVT_RAM
	ivt_timer1              0x10 : {*.o(ivt_entry_timer1)}             > IVT_RAM
	ivt_message             0x14 : {*.o(ivt_entry_message)}            > IVT_RAM
	ivt_dma0                0x18 : {*.o(ivt_entry_dma0)}               > IVT_RAM
	ivt_dma1                0x1c : {*.o(ivt_entry_dma1)}               > IVT_RAM
	ivt_wand                0x20 : {*.o(ivt_entry_wand)}               > IVT_RAM
	ivt_user                0x24 : {*.o(ivt_entry_user)}               > IVT_RAM

	.code_dram    : {*.o(code_dram)   *.o(.code_dram)  } > EXTERNAL_CODE_RAM
	.shared_dram  : {*.o(shared_dram) *.o(.shared_dram)} > EXTERNAL_DATA_RAM 

	external_code_ram : { *(external_code_ram) } > EXTERNAL_CODE_RAM
	external_load_ram : { *(external_load_ram) } > EXTERNAL_LOAD_RAM
	external_data_ram : { *(external_data_ram) } > EXTERNAL_DATA_RAM 
	external_alloc_ram : { *(external_alloc_ram) } > EXTERNAL_ALLOC_RAM 

	NEW_LIB_RO            : {lib_a-*.o(.text  .rodata)  *.o(libgloss_epiphany) } > EXTERNAL_CODE_RAM
	NEW_LIB_WR            : {lib_a-*.o(.data)                                  } > EXTERNAL_CODE_RAM
	GNU_C_BUILTIN_LIB_RO  :
	{
		*mulsi3.o(.text  .rodata)   *modsi3.o(.text  .rodata)
		*divsi3.o(.text  .rodata)   *udivsi3.o(.text .rodata)
		*umodsi3.o(.text .rodata)  _*.o(.text  .rodata)
	} > EXTERNAL_CODE_RAM

	.text : { *(.text*) } > CODE_RAM
	.data : { *(.data*) } > CODE_RAM
	.rodata : { *(.rodata*) } > CODE_RAM 

	module1 : { *(module1*) } > MODULE_1
	module2 : { *(module2*) } > MODULE_2
	module3 : { *(module3*) } > MODULE_3
	module4 : { *(module4*) } > MODULE_4
	module5 : { *(module5*) } > MODULE_5
	module6 : { *(module6*) } > MODULE_6
	module7 : { *(module7*) } > MODULE_7
	module8 : { *(module8*) } > MODULE_8
	module9 : { *(module9*) } > MODULE_9

	alloc_ram   : {*.o(alloc_ram)} > ALLOC_RAM


	.comment  0 : { *(.comment*) }
}
